{"ast":null,"code":"export default {\n  data() {\n    return {\n      username: '',\n      nickname: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      emailErrorMessage: '',\n      passwordMismatch: false,\n      passwordLengthMet: false,\n      passwordUpperCaseMet: false,\n      passwordSpecialCharacterMet: false,\n      passwordConditionsMet: 0\n    };\n  },\n  computed: {\n    canSubmit() {\n      return this.username && this.nickname && this.email && this.password && this.passwordConfirm && !this.emailErrorMessage && !this.passwordMismatch && this.passwordConditionsMet === 3;\n    }\n  },\n  methods: {\n    async signup() {\n      // 유효성 검사\n      if (!this.canSubmit) {\n        console.error('모든 필드를 올바르게 입력하세요.');\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:3000/users', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.username,\n            nickname: this.nickname,\n            email: this.email,\n            password: this.password\n          })\n        });\n        if (response.ok) {\n          // 회원가입 성공\n          console.log('회원가입 성공');\n\n          // 모달창 표시\n          this.showModal = true;\n        } else {\n          // 회원가입 실패\n          console.error('회원가입 실패');\n        }\n      } catch (error) {\n        console.error('회원가입 오류:', error);\n      }\n    },\n    validateEmail() {\n      // 간단한 이메일 유효성 검사 정규식\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.email)) {\n        this.emailErrorMessage = '올바른 이메일을 입력하세요.';\n      } else {\n        this.emailErrorMessage = '';\n      }\n    },\n    validatePassword() {\n      // 비밀번호 길이가 4자 이상인지 확인\n      this.passwordLengthMet = this.password.length >= 4;\n\n      // 대문자 포함 여부 확인\n      this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\n\n      // 특수문자 포함 여부 확인\n      this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\n\n      // 만족하는 비밀번호 조건 개수 계산\n      this.passwordConditionsMet = [this.passwordLengthMet, this.passwordUpperCaseMet, this.passwordSpecialCharacterMet].filter(condition => condition).length;\n    },\n    validatePasswordConfirm() {\n      // 비밀번호 확인 일치 여부 확인\n      this.passwordMismatch = this.password !== this.passwordConfirm;\n    }\n  }\n};","map":{"version":3,"names":["data","username","nickname","email","password","passwordConfirm","emailErrorMessage","passwordMismatch","passwordLengthMet","passwordUpperCaseMet","passwordSpecialCharacterMet","passwordConditionsMet","computed","canSubmit","methods","signup","console","error","response","fetch","method","headers","body","JSON","stringify","ok","log","showModal","validateEmail","emailRegex","test","validatePassword","length","filter","condition","validatePasswordConfirm"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\SignupForm.vue"],"sourcesContent":["<template>\n  <div class=\"signup-form\">\n    <h2>회원가입</h2>\n    <form @submit.prevent=\"signup\">\n      <div class=\"form-group\">\n        <label for=\"username\">ID</label>\n        <input type=\"text\" id=\"username\" v-model=\"username\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"nickname\">닉네임</label>\n        <input type=\"text\" id=\"nickname\" v-model=\"nickname\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">E-MAIL</label>\n        <input type=\"email\" id=\"email\" v-model=\"email\" required @blur=\"validateEmail\">\n        <p v-if=\"emailErrorMessage\" class=\"error-message\">{{ emailErrorMessage }}</p>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">PASSWORD</label>\n        <input type=\"password\" id=\"password\" v-model=\"password\" required @input=\"validatePassword\">\n        <div class=\"password-strength-bar\">\n          <div :style=\"{ width: passwordLengthMet ? '33.33%' : '0%', backgroundColor: passwordLengthMet ? '#6f9e5e' : '' }\" class=\"strength-meter-1\"></div>\n          <div :style=\"{ width: passwordUpperCaseMet ? '33.33%' : '0%', backgroundColor: passwordUpperCaseMet ? '#6f9e5e' : '' }\" class=\"strength-meter-2\"></div>\n          <div :style=\"{ width: passwordSpecialCharacterMet ? '33.33%' : '0%', backgroundColor: passwordSpecialCharacterMet ? '#6f9e5e' : '' }\" class=\"strength-meter-3\"></div>\n        </div>\n        <div class=\"password-conditions\">\n          <span :class=\"{ 'condition-met': passwordLengthMet }\">최소 4자 이상</span>\n          <span :class=\"{ 'condition-met': passwordUpperCaseMet }\">대문자 포함</span>\n          <span :class=\"{ 'condition-met': passwordSpecialCharacterMet }\">특수문자 포함</span>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"passwordConfirm\">비밀번호 확인</label>\n        <input type=\"password\" id=\"passwordConfirm\" v-model=\"passwordConfirm\" required @input=\"validatePasswordConfirm\">\n        <p v-if=\"passwordMismatch\" class=\"error-message\">비밀번호가 일치하지 않습니다.</p>\n      </div>\n      <button :disabled=\"!canSubmit\" type=\"submit\">회원가입</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: '',\n      nickname: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      emailErrorMessage: '',\n      passwordMismatch: false,\n      passwordLengthMet: false,\n      passwordUpperCaseMet: false,\n      passwordSpecialCharacterMet: false,\n      passwordConditionsMet: 0\n    };\n  },\n  computed: {\n    canSubmit() {\n      return (\n        this.username &&\n        this.nickname &&\n        this.email &&\n        this.password &&\n        this.passwordConfirm &&\n        !this.emailErrorMessage &&\n        !this.passwordMismatch &&\n        this.passwordConditionsMet === 3\n      );\n    }\n  },\n  methods: {\n    async signup() {\n  // 유효성 검사\n  if (!this.canSubmit) {\n    console.error('모든 필드를 올바르게 입력하세요.');\n    return;\n  }\n\n  try {\n    const response = await fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.username,\n        nickname: this.nickname,\n        email: this.email,\n        password: this.password\n      })\n    });\n\n    if (response.ok) {\n      // 회원가입 성공\n      console.log('회원가입 성공');\n\n      // 모달창 표시\n      this.showModal = true;\n    } else {\n      // 회원가입 실패\n      console.error('회원가입 실패');\n    }\n  } catch (error) {\n    console.error('회원가입 오류:', error);\n  }\n},\n\n    validateEmail() {\n      // 간단한 이메일 유효성 검사 정규식\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n      if (!emailRegex.test(this.email)) {\n        this.emailErrorMessage = '올바른 이메일을 입력하세요.';\n      } else {\n        this.emailErrorMessage = '';\n      }\n    },\n    validatePassword() {\n      // 비밀번호 길이가 4자 이상인지 확인\n      this.passwordLengthMet = this.password.length >= 4;\n\n      // 대문자 포함 여부 확인\n      this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\n\n      // 특수문자 포함 여부 확인\n      this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\n\n      // 만족하는 비밀번호 조건 개수 계산\n      this.passwordConditionsMet = [\n        this.passwordLengthMet,\n        this.passwordUpperCaseMet,\n        this.passwordSpecialCharacterMet\n      ].filter(condition => condition).length;\n    },\n    validatePasswordConfirm() {\n      // 비밀번호 확인 일치 여부 확인\n      this.passwordMismatch = this.password !== this.passwordConfirm;\n    }\n  }\n}\n</script>\n\n<style>\n/* 스타일은 그대로 유지됩니다. */\n.password-strength-bar {\n  display: flex;\n  height: 5px;\n  background-color: #ccc;\n  margin-bottom: 5px;\n}\n\n.strength-meter-1,\n.strength-meter-2,\n.strength-meter-3 {\n  height: 100%;\n  transition: width 0.3s;\n}\n\n.strength-meter-1 {\n  background-color: #6f9e5e;\n}\n\n.strength-meter-2 {\n  background-color: #6f9e5e;\n}\n\n.strength-meter-3 {\n  background-color: #6f9e5e;\n}\n\n.password-conditions {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.condition-met {\n  color: green;\n}\n\n.signup-form {\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n}\n\n.signup-form h2 {\n  margin-bottom: 20px;\n}\n\n.signup-form form {\n  display: flex;\n  flex-direction: column;\n}\n\n.signup-form .form-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px; /* 변경된 부분: 이전에는 15px 였습니다 */\n}\n\n.signup-form label {\n  margin-bottom: 5px; /* 변경된 부분: 간격이 너무 컸습니다 */\n}\n\n.signup-form input {\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px; /* 변경된 부분: 라벨과의 간격을 조정했습니다 */\n}\n\n.signup-form button {\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\n.signup-form button:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}