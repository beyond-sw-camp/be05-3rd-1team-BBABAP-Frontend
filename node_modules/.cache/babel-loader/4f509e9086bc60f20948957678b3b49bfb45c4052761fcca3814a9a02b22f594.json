{"ast":null,"code":"import { vModelText as _vModelText, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-500dc594\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"option\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"검색하기\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"map_wrap\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"700px\",\n    \"position\": \"relative\",\n    \"overflow\": \"hidden\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = {\n  id: \"searchResults\"\n};\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = {\n  id: \"menu_wrap\",\n  class: \"bg_white\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_11 = {\n  id: \"placesList\"\n};\nconst _hoisted_12 = {\n  class: \"info\"\n};\nconst _hoisted_13 = {\n  class: \"jibun gray\"\n};\nconst _hoisted_14 = {\n  class: \"tel\"\n};\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"pagination\"\n}, null, -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"table\", null, [_createElementVNode(\"div\", null, [_createElementVNode(\"form\", null, [_createTextVNode(\" 주소검색 : \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.address = $event),\n    size: \"15\",\n    onKeydown: _cache[1] || (_cache[1] = _withKeys((...args) => $options.searchAddress && $options.searchAddress(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.address]]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.searchAddress && $options.searchAddress(...args))\n  }, \"검색\")])])]), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.searchPlaces && $options.searchPlaces(...args), [\"prevent\"]))\n  }, [_createTextVNode(\" 키워드 : \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.keyword = $event),\n    size: \"15\",\n    placeholder: \"전기차\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.keyword]]), _hoisted_2], 32 /* NEED_HYDRATION */)])]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.findMyLocation && $options.findMyLocation(...args))\n  }, \"내 위치로\"), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createCommentVNode(\" 검색 결과를 표시할 팝업 리스트 \"), _createElementVNode(\"div\", _hoisted_5, [$data.searchResult.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.searchResult, result => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: result.place_name\n    }, [_createElementVNode(\"a\", {\n      href: \"#\",\n      onClick: $event => $options.moveToLocation(result.y, result.x)\n    }, _toDisplayString(result.place_name), 9 /* TEXT, PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"검색 결과가 없습니다. 주소를 다시 확인해주세요.\"))]), _createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _createElementVNode(\"ul\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.places, (place, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"item\"\n    }, [_createElementVNode(\"span\", {\n      class: _normalizeClass('markerbg marker_' + (index + 1))\n    }, null, 2 /* CLASS */), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"h5\", null, _toDisplayString(place.place_name), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(place.road_address_name), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_13, _toDisplayString(place.address_name), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_14, _toDisplayString(place.phone), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_15])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","type","id","style","key","_createElementBlock","_createTextVNode","_cache","$event","$data","address","size","onKeydown","_withKeys","args","$options","searchAddress","onClick","_hoisted_1","onSubmit","_withModifiers","searchPlaces","keyword","placeholder","_hoisted_2","findMyLocation","_hoisted_3","_hoisted_4","_createCommentVNode","_hoisted_5","searchResult","length","_hoisted_6","_Fragment","_renderList","result","place_name","href","moveToLocation","y","x","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","places","place","index","_normalizeClass","_hoisted_12","_toDisplayString","road_address_name","_hoisted_13","address_name","_hoisted_14","phone","_hoisted_15"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\FinalMap.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <table>\r\n      <div>\r\n        <form>\r\n          주소검색 : <input type=\"text\" v-model=\"address\" size=\"15\" @keydown.enter=\"searchAddress\"/>\r\n          <button type=\"submit\" @click=\"searchAddress\">검색</button>\r\n        </form>\r\n      </div>\r\n    </table>\r\n    <div class=\"option\">\r\n      <div>\r\n        <form @submit.prevent=\"searchPlaces\">\r\n          키워드 : <input type=\"text\" v-model=\"keyword\" size=\"15\" placeholder=\"전기차\">\r\n          <button type=\"submit\">검색하기</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <button type=\"submit\" @click=\"findMyLocation\">내 위치로</button>\r\n    <div class=\"map_wrap\">\r\n      <div id=\"map\" style=\"width: 100%; height: 700px; position: relative; overflow: hidden;\"></div>\r\n      <!-- 검색 결과를 표시할 팝업 리스트 -->\r\n      <div id=\"searchResults\">\r\n        <ul v-if=\"searchResult.length > 0\">\r\n          <li v-for=\"result in searchResult\" :key=\"result.place_name\">\r\n            <a href=\"#\" @click=\"moveToLocation(result.y, result.x)\">{{ result.place_name }}</a>\r\n          </li>\r\n        </ul>\r\n        <p v-else>검색 결과가 없습니다. 주소를 다시 확인해주세요.</p>\r\n      </div>\r\n      <div id=\"menu_wrap\" class=\"bg_white\">\r\n        <hr>\r\n        <ul id=\"placesList\">\r\n          <li v-for=\"(place, index) in places\" :key=\"index\" class=\"item\">\r\n            <span :class=\"'markerbg marker_' + (index + 1)\"></span>\r\n            <div class=\"info\">\r\n              <h5>{{ place.place_name }}</h5>\r\n              <span>{{ place.road_address_name }}</span>\r\n              <span class=\"jibun gray\">{{ place.address_name }}</span>\r\n              <span class=\"tel\">{{ place.phone }}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        <div id=\"pagination\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"FinalMap\",\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      places: [],\r\n      map: null,\r\n      marker: null,\r\n      infowindow: null,\r\n      currentCircle: null,\r\n      address: '',\r\n      searchResult: [],\r\n      markers: []\r\n    };\r\n  },\r\n  mounted() {\r\n    kakao.maps.load(() => {\r\n      this.initMap();\r\n      this.findMyLocation();\r\n    });\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 지도 초기 세팅\r\n      this.map = new kakao.maps.Map(this.$refs.map, {\r\n        center: new kakao.maps.LatLng(33.450701, 126.570667),\r\n        level: 3\r\n      });\r\n      this.marker = new kakao.maps.Marker();\r\n      this.infowindow = new kakao.maps.InfoWindow({ removable: true });\r\n    },\r\n    displayCircle(lat, lon) {\r\n      // 반경 표시\r\n      if (this.currentCircle !== null) {\r\n        this.currentCircle.setMap(null);\r\n      }\r\n      this.currentCircle = new kakao.maps.Circle({\r\n        center: new kakao.maps.LatLng(lat, lon),\r\n        radius: 1000,\r\n        strokeWeight: 5,\r\n        strokeColor: '#75B8FA',\r\n        strokeOpacity: 1,\r\n        strokeStyle: 'dashed',\r\n        fillColor: '#CFE7FF',\r\n        fillOpacity: 0.7\r\n      });\r\n      this.currentCircle.setMap(this.map);\r\n    },\r\n    displayMarker(locPosition, message) {\r\n      // 마커 표시\r\n      this.marker.setMap(this.map);\r\n      this.marker.setPosition(locPosition);\r\n\r\n      // 인포윈도우 설정\r\n      this.infowindow.setContent(message);\r\n      this.infowindow.open(this.map, this.marker);\r\n\r\n      // 지도 중심 위치 설정\r\n      this.map.setCenter(locPosition);\r\n\r\n      // 마커 클릭 이벤트 등록\r\n      kakao.maps.event.addListener(this.marker, 'click', () => {\r\n        // 마커 클릭 시 주소 정보 가져오기\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        geocoder.coord2Address(locPosition.getLng(), locPosition.getLat(), (result, status) => {\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            let detailAddr = result[0].road_address ?\r\n                `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` :\r\n                '';\r\n            detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div>` +\r\n                `<button id=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\r\n\r\n            // 인포윈도우에 상세 주소 정보 표시\r\n            this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\r\n\r\n            // 즐겨찾기 버튼 클릭 이벤트 리스너\r\n            const addFavoriteButtons = document.querySelectorAll('.addFavorite');\r\n            addFavoriteButtons.forEach(button => {\r\n              button.addEventListener('click', () => {\r\n                alert(\"즐겨찾기 버튼 클릭\");\r\n              });\r\n            });\r\n          }\r\n        });\r\n      });\r\n    },\r\n    findMyLocation() {\r\n      // 현재 위치 찾기\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n              const lat = position.coords.latitude;\r\n              const lon = position.coords.longitude;\r\n              const locPosition = new kakao.maps.LatLng(lat, lon);\r\n              const message = '<div class=\"infoWindow\">현재 나의 위치</div>';\r\n              this.displayMarker(locPosition, message);\r\n              this.displayCircle(lat, lon);\r\n            },\r\n            error => {\r\n              console.error(error);\r\n            },\r\n            {\r\n              enableHighAccuracy: true,\r\n              maximumAge: 0,\r\n              timeout: Infinity\r\n            }\r\n        );\r\n      } else {\r\n        alert('geolocation을 사용할 수 없습니다.');\r\n      }\r\n    },\r\n    searchAddress() {\r\n      const addr = this.address;\r\n      alert(\"검색한 주소 : \"+ addr);\r\n      // kakao maps Places 객체 생성\r\n      const places = new kakao.maps.services.Places();\r\n      // 주소 검색 요청\r\n      places.keywordSearch(addr, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          if (result.length > 1) { // 검색 결과가 여러 개인 경우\r\n            // 검색 결과 리스트 설정\r\n            this.searchResult = result;\r\n          } else if (result.length === 1) { // 검색 결과가 하나인 경우\r\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            this.displayMarker(coords, result[0].address_name);\r\n            this.displayCircle(result[0].y, result[0].x);\r\n            // 지번 주소 출력\r\n            const geocoder = new kakao.maps.services.Geocoder();\r\n            geocoder.coord2Address(result[0].x, result[0].y, (result, status) => {\r\n              if (status === kakao.maps.services.Status.OK) {\r\n                const address = result[0].address.address_name;\r\n                alert(\"선택한 위치의 지번 주소: \" + address);\r\n                // 주소를 시/도 까지만 잘라내기\r\n                const slicedAddr = address.split(' ').slice(0, 2).join(' ');\r\n                // AJAX 통신으로 잘라낸 지번 주소 데이터 전달\r\n                this.fetchChargerData(slicedAddr);\r\n              }\r\n            });\r\n          } else {\r\n            alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\r\n          }\r\n        } else {\r\n          alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\r\n        }\r\n      });\r\n    },\r\n    moveToLocation(lat, lon) {\r\n      // 위치 이동\r\n      const locPosition = new kakao.maps.LatLng(lat, lon);\r\n      const message = '<div class=\"infoWindow\">검색 결과 위치</div>';\r\n      this.displayMarker(locPosition, message);\r\n      this.displayCircle(lat, lon);\r\n\r\n      // 좌표를 주소로 변환하여 API 호출\r\n      const geocoder = new kakao.maps.services.Geocoder();\r\n      geocoder.coord2Address(lon, lat, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          const address = result[0].address.address_name;\r\n          const slicedAddr = address.split(' ').slice(0, 1).join(' ');\r\n          this.fetchChargerData(slicedAddr);\r\n        }\r\n      });\r\n    },\r\n    fetchChargerData(address) {\r\n      // 주소를 이용하여 충전소 데이터 가져오기\r\n      axios.get(`http://localhost:7777/bbabap/getchargeraddress/${address}`)\r\n          .then(response => {\r\n            const data = response.data;\r\n            console.log('Charger Info:', data);\r\n            // 가져온 데이터로 마커 표시\r\n            this.displayMarkersWithAddresses(data.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching charger data:', error);\r\n          });\r\n    },\r\n    displayMarkersWithAddresses(dataArray) {\r\n      // 배열에 있는 각 데이터에 대해 반복하며 마커를 표시\r\n      dataArray.forEach(charger => {\r\n        // 주소를 이용하여 지도에 마커를 생성하고 표시\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        geocoder.addressSearch(charger.주소, (result, status) => {\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            // 마커 생성\r\n            const marker = new kakao.maps.Marker({\r\n              position: coords\r\n            });\r\n            // 마커를 지도에 표시\r\n            marker.setMap(this.map);\r\n            // 마커 클릭 시 정보창에 주소 정보와 즐겨찾기 버튼을 함께 출력\r\n            kakao.maps.event.addListener(marker, 'click', () => {\r\n              // 마커의 좌표 정보를 사용하여 주소 정보를 요청.\r\n              geocoder.coord2Address(marker.getPosition().getLng(), marker.getPosition().getLat(), (result, status) => {\r\n                if (status === kakao.maps.services.Status.OK) {\r\n                  let detailAddr = result[0].road_address ?\r\n                      `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` :\r\n                      '';\r\n                  detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div><button class=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\r\n                  // 인포윈도우에 상세 주소 정보를 표시합니다\r\n                  this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${charger.충전소명}</div><div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\r\n                  this.infowindow.open(this.map, marker);\r\n                  // 즐겨찾기 버튼 클릭 이벤트 리스너\r\n                  const addFavoriteButtons = document.querySelectorAll('.addFavorite');\r\n                  addFavoriteButtons.forEach(button => {\r\n                    button.addEventListener('click', () => {\r\n                      alert(\"즐겨찾기 버튼 클릭\");\r\n                    });\r\n                  });\r\n                }\r\n              });\r\n            });\r\n            // 마커를 클릭했을 때 정보창을 열기 위한 내용 설정\r\n            const message = `<div class=\"infoWindow\">${charger.충전소명}</div>`;\r\n            this.infowindow.setContent(message);\r\n            this.infowindow.open(this.map, marker);//지도에 정보창 표시\r\n          }\r\n        });\r\n      });\r\n    },\r\n    findMyLocbtn() {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n              const lat = position.coords.latitude;\r\n              const lon = position.coords.longitude;\r\n              const locPosition = new kakao.maps.LatLng(lat, lon);\r\n              const message = '<div class=\"infoWindow\">현재 위치</div>';\r\n              this.displayMarker(locPosition, message);\r\n              this.displayCircle(lat, lon);\r\n            },\r\n            error => {\r\n              console.error(error);\r\n            },\r\n            {\r\n              enableHighAccuracy: true,\r\n              maximumAge: 0,\r\n              timeout: Infinity\r\n            }\r\n        );\r\n      } else {\r\n        alert('geolocation을 사용할 수 없어요..');\r\n      }\r\n    },\r\n    removeMarkersbtn() {\r\n      // 이전에 생성된 모든 마커를 지도에서 제거합니다.\r\n      this.markers.forEach(marker => {\r\n        // 클릭 이벤트 리스너를 함께 제거합니다.\r\n        kakao.maps.event.removeListener(marker, 'click');\r\n        marker.setMap(null);\r\n      });\r\n      // 배열을 비워줍니다.\r\n      this.markers = [];\r\n    },\r\n    handleKeyDown(event) {\r\n      if (event.key === \"Enter\") {\r\n        this.searchAddress();\r\n      }\r\n    },\r\n    displayElectricChargingStation() {\r\n      const ps = new window.kakao.maps.services.Places();\r\n      ps.categorySearch('OL7', this.placesSearchCB);\r\n    },\r\n    searchPlaces() {\r\n      if (!this.keyword.trim()) {\r\n        alert(\"키워드를 입력해주세요!\");\r\n        return;\r\n      }\r\n\r\n      // 검색을 place_name으로 변경\r\n      const ps = new window.kakao.maps.services.Places();\r\n      // ps.keywordSearch(this.keyword, this.placesSearchCB);\r\n      ps.keywordSearch(this.keyword, this.placesSearchCB, { useMapBounds: true });\r\n    },\r\n    placesSearchCB(data, status, pagination) {\r\n      if (status === window.kakao.maps.services.Status.OK) {\r\n        this.places = data;\r\n        this.displayPlaces();\r\n        this.displayPagination(pagination);\r\n      } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\r\n        alert(\"검색 결과가 존재하지 않습니다.\");\r\n      } else if (status === window.kakao.maps.services.Status.ERROR) {\r\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\r\n      }\r\n    },\r\n    displayPlaces() {\r\n      // 기존 마커 제거\r\n      this.removeMarkers();\r\n\r\n      const bounds = new window.kakao.maps.LatLngBounds();\r\n\r\n      // 검색 결과에 따라 마커 추가\r\n      this.places.forEach((place, index) => {\r\n        const position = new window.kakao.maps.LatLng(place.y, place.x);\r\n        const markerImage = new window.kakao.maps.MarkerImage(\r\n            \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\",\r\n            new window.kakao.maps.Size(36, 37),\r\n            {\r\n              spriteSize: new window.kakao.maps.Size(36, 691),\r\n              spriteOrigin: new window.kakao.maps.Point(0, (index * 46) + 10),\r\n              offset: new window.kakao.maps.Point(13, 37)\r\n            }\r\n        );\r\n        const marker = new window.kakao.maps.Marker({\r\n          position,\r\n          image: markerImage\r\n        });\r\n\r\n        marker.setMap(this.map);\r\n        this.markers.push(marker);\r\n\r\n        bounds.extend(position);\r\n      });\r\n\r\n      this.map.setBounds(bounds);\r\n    },\r\n    displayPagination(pagination) {\r\n      const paginationEl = document.getElementById(\"pagination\");\r\n      paginationEl.innerHTML = \"\";\r\n\r\n      for (let i = 1; i <= pagination.last; i++) {\r\n        const el = document.createElement(\"a\");\r\n        el.href = \"#\";\r\n        el.textContent = i;\r\n\r\n        if (i === pagination.current) {\r\n          el.className = \"on\";\r\n        } else {\r\n          el.onclick = () => {\r\n            pagination.gotoPage(i);\r\n          };\r\n        }\r\n\r\n        paginationEl.appendChild(el);\r\n      }\r\n    },\r\n    removeMarkers() {\r\n      this.markers.forEach(marker => marker.setMap(null));\r\n      this.markers = [];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 여기에 스타일을 추가합니다 */\r\n#menu_wrap {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n.option {\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n}\r\n.option input[type=\"text\"] {\r\n  width: 70%;\r\n  height: 30px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n}\r\n.option button[type=\"submit\"] {\r\n  width: 25%;\r\n  height: 36px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  cursor: pointer;\r\n}\r\n.option button[type=\"submit\"]:hover {\r\n  background-color: #0056b3;\r\n}\r\n#placesList {\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n#placesList .item {\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px 0;\r\n}\r\n#placesList .item:last-child {\r\n  border-bottom: none;\r\n}\r\n#placesList .item h5 {\r\n  margin-bottom: 5px;\r\n}\r\n#placesList .item .info {\r\n  color: #666;\r\n}\r\n#placesList .item .tel {\r\n  color: #009900;\r\n}\r\n.infoWindow {\r\n  padding: 5px;\r\n  border: 1px solid #CCCCCC;\r\n  border-radius: 5px;\r\n  width: auto;\r\n  min-width: 150px;\r\n  max-width: 400px;\r\n  word-wrap: break-word;\r\n  overflow: hidden;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}