{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, normalizeClass as _normalizeClass, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"signup-form\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"회원가입\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"form-group\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"username\"\n}, \"ID\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"nickname\"\n}, \"닉네임\", -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"E-MAIL\", -1 /* HOISTED */);\nconst _hoisted_9 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_10 = {\n  class: \"form-group\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\"\n}, \"PASSWORD\", -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"password-strength-bar\"\n};\nconst _hoisted_13 = {\n  class: \"password-conditions\"\n};\nconst _hoisted_14 = {\n  class: \"form-group\"\n};\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"passwordConfirm\"\n}, \"비밀번호 확인\", -1 /* HOISTED */);\nconst _hoisted_16 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_17 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[8] || (_cache[8] = _withModifiers((...args) => $options.signup && $options.signup(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"username\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]])]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"nickname\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.nickname = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.nickname]])]), _createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.email = $event),\n    required: \"\",\n    onBlur: _cache[3] || (_cache[3] = (...args) => $options.validateEmail && $options.validateEmail(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.email]]), $data.emailErrorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, _toDisplayString($data.emailErrorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_10, [_hoisted_11, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.password = $event),\n    required: \"\",\n    onInput: _cache[5] || (_cache[5] = (...args) => $options.validatePassword && $options.validatePassword(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.password]]), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", {\n    style: _normalizeStyle({\n      width: $data.passwordLengthMet ? '33.33%' : '0%',\n      backgroundColor: $data.passwordLengthMet ? '#6f9e5e' : ''\n    }),\n    class: \"strength-meter-1\"\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    style: _normalizeStyle({\n      width: $data.passwordUpperCaseMet ? '33.33%' : '0%',\n      backgroundColor: $data.passwordUpperCaseMet ? '#6f9e5e' : ''\n    }),\n    class: \"strength-meter-2\"\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    style: _normalizeStyle({\n      width: $data.passwordSpecialCharacterMet ? '33.33%' : '0%',\n      backgroundColor: $data.passwordSpecialCharacterMet ? '#6f9e5e' : ''\n    }),\n    class: \"strength-meter-3\"\n  }, null, 4 /* STYLE */)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"span\", {\n    class: _normalizeClass({\n      'condition-met': $data.passwordLengthMet\n    })\n  }, \"최소 4자 이상\", 2 /* CLASS */), _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      'condition-met': $data.passwordUpperCaseMet\n    })\n  }, \"대문자 포함\", 2 /* CLASS */), _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      'condition-met': $data.passwordSpecialCharacterMet\n    })\n  }, \"특수문자 포함\", 2 /* CLASS */)])]), _createElementVNode(\"div\", _hoisted_14, [_hoisted_15, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"passwordConfirm\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.passwordConfirm = $event),\n    required: \"\",\n    onInput: _cache[7] || (_cache[7] = (...args) => $options.validatePasswordConfirm && $options.validatePasswordConfirm(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.passwordConfirm]]), $data.passwordMismatch ? (_openBlock(), _createElementBlock(\"p\", _hoisted_16, \"비밀번호가 일치하지 않습니다.\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"button\", {\n    disabled: !$options.canSubmit,\n    type: \"submit\"\n  }, \"회원가입\", 8 /* PROPS */, _hoisted_17)], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","key","_createElementBlock","_hoisted_1","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","signup","_hoisted_3","_hoisted_4","type","id","$event","$data","username","required","_hoisted_5","_hoisted_6","nickname","_hoisted_7","_hoisted_8","email","onBlur","validateEmail","emailErrorMessage","_hoisted_9","_toDisplayString","_createCommentVNode","_hoisted_10","_hoisted_11","password","onInput","validatePassword","_hoisted_12","style","_normalizeStyle","width","passwordLengthMet","backgroundColor","passwordUpperCaseMet","passwordSpecialCharacterMet","_hoisted_13","_normalizeClass","_hoisted_14","_hoisted_15","passwordConfirm","validatePasswordConfirm","passwordMismatch","_hoisted_16","disabled","canSubmit","_hoisted_17"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\SignupForm.vue"],"sourcesContent":["<template>\n  <div class=\"signup-form\">\n    <h2>회원가입</h2>\n    <form @submit.prevent=\"signup\">\n      <div class=\"form-group\">\n        <label for=\"username\">ID</label>\n        <input type=\"text\" id=\"username\" v-model=\"username\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"nickname\">닉네임</label>\n        <input type=\"text\" id=\"nickname\" v-model=\"nickname\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">E-MAIL</label>\n        <input type=\"email\" id=\"email\" v-model=\"email\" required @blur=\"validateEmail\">\n        <p v-if=\"emailErrorMessage\" class=\"error-message\">{{ emailErrorMessage }}</p>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">PASSWORD</label>\n        <input type=\"password\" id=\"password\" v-model=\"password\" required @input=\"validatePassword\">\n        <div class=\"password-strength-bar\">\n          <div :style=\"{ width: passwordLengthMet ? '33.33%' : '0%', backgroundColor: passwordLengthMet ? '#6f9e5e' : '' }\" class=\"strength-meter-1\"></div>\n          <div :style=\"{ width: passwordUpperCaseMet ? '33.33%' : '0%', backgroundColor: passwordUpperCaseMet ? '#6f9e5e' : '' }\" class=\"strength-meter-2\"></div>\n          <div :style=\"{ width: passwordSpecialCharacterMet ? '33.33%' : '0%', backgroundColor: passwordSpecialCharacterMet ? '#6f9e5e' : '' }\" class=\"strength-meter-3\"></div>\n        </div>\n        <div class=\"password-conditions\">\n          <span :class=\"{ 'condition-met': passwordLengthMet }\">최소 4자 이상</span>\n          <span :class=\"{ 'condition-met': passwordUpperCaseMet }\">대문자 포함</span>\n          <span :class=\"{ 'condition-met': passwordSpecialCharacterMet }\">특수문자 포함</span>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"passwordConfirm\">비밀번호 확인</label>\n        <input type=\"password\" id=\"passwordConfirm\" v-model=\"passwordConfirm\" required @input=\"validatePasswordConfirm\">\n        <p v-if=\"passwordMismatch\" class=\"error-message\">비밀번호가 일치하지 않습니다.</p>\n      </div>\n      <button :disabled=\"!canSubmit\" type=\"submit\">회원가입</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      username: '',\n      nickname: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      emailErrorMessage: '',\n      passwordMismatch: false,\n      passwordLengthMet: false,\n      passwordUpperCaseMet: false,\n      passwordSpecialCharacterMet: false,\n      passwordConditionsMet: 0,\n      users: [] // 사용자 데이터를 저장할 배열\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:3000/users');\n      this.users = response.data;\n    } catch (error) {\n      console.error('사용자 데이터를 가져오는 중 에러 발생:', error);\n    }\n  },\n  computed: {\n    canSubmit() {\n      return (\n        this.username &&\n        this.nickname &&\n        this.email &&\n        this.password &&\n        this.passwordConfirm &&\n        !this.emailErrorMessage &&\n        !this.passwordMismatch &&\n        this.passwordConditionsMet === 3\n      );\n    }\n  },\n  methods: {\n    async signup() {\n  // 유효성 검사\n  if (!this.canSubmit) {\n    alert('모든 필드를 올바르게 입력하세요.');\n    return;\n  }\n\n  // 아이디와 닉네임 중복 검사\n  const usernameExists = this.checkUsernameExists(this.username);\n  const nicknameExists = this.checkNicknameExists(this.nickname);\n\n  if (usernameExists || nicknameExists) {\n    alert('아이디 또는 닉네임이 이미 사용 중입니다.');\n    return;\n  }\n\n  try {\n    const response = await fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.username,\n        nickname: this.nickname,\n        email: this.email,\n        password: this.password\n      })\n    });\n\n    if (response.ok) {\n  // 회원가입 성공\n  console.log('회원가입 성공');\n  \n  // Vue Router를 사용하여 로그인 페이지로 이동\n  this.$router.push({ path: '/login' });\n} else {\n  // 회원가입 실패\n  console.error('회원가입 실패');\n}\n\n  } catch (error) {\n    console.error('회원가입 오류:', error);\n  }\n},\n\n    checkUsernameExists(username) {\n      return this.users.some(user => user.username === username);\n    },\n    checkNicknameExists(nickname) {\n      return this.users.some(user => user.nickname === nickname);\n    },\n    validateEmail() {\n      // 간단한 이메일 유효성 검사 정규식\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n      if (!emailRegex.test(this.email)) {\n        this.emailErrorMessage = '올바른 이메일을 입력하세요.';\n      } else {\n        this.emailErrorMessage = '';\n      }\n    },\n    validatePassword() {\n      // 비밀번호 길이가 4자 이상인지 확인\n      this.passwordLengthMet = this.password.length >= 4;\n\n      // 대문자 포함 여부 확인\n      this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\n\n      // 특수문자 포함 여부 확인\n      this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\n\n      // 만족하는 비밀번호 조건 개수 계산\n      this.passwordConditionsMet = [\n        this.passwordLengthMet,\n        this.passwordUpperCaseMet,\n        this.passwordSpecialCharacterMet\n      ].filter(condition => condition).length;\n    },\n    validatePasswordConfirm() {\n      // 비밀번호 확인 일치 여부 확인\n      this.passwordMismatch = this.password !== this.passwordConfirm;\n    }\n  }\n}\n\n</script>\n\n<style>\n/* 스타일은 그대로 유지됩니다. */\n.password-strength-bar {\n  display: flex;\n  height: 5px;\n  background-color: #ccc;\n  margin-bottom: 5px;\n}\n\n.strength-meter-1,\n.strength-meter-2,\n.strength-meter-3 {\n  height: 100%;\n  transition: width 0.3s;\n}\n\n.strength-meter-1 {\n  background-color: #6f9e5e;\n}\n\n.strength-meter-2 {\n  background-color: #6f9e5e;\n}\n\n.strength-meter-3 {\n  background-color: #6f9e5e;\n}\n\n.password-conditions {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.condition-met {\n  color: green;\n}\n\n.signup-form {\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n}\n\n.signup-form h2 {\n  margin-bottom: 20px;\n}\n\n.signup-form form {\n  display: flex;\n  flex-direction: column;\n}\n\n.signup-form .form-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px; /* 변경된 부분: 이전에는 15px 였습니다 */\n}\n\n.signup-form label {\n  margin-bottom: 5px; /* 변경된 부분: 간격이 너무 컸습니다 */\n}\n\n.signup-form input {\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px; /* 변경된 부분: 라벨과의 간격을 조정했습니다 */\n}\n\n.signup-form button {\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\n.signup-form button:hover {\n  background-color: #0056b3;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAa;gCACtBC,mBAAA,CAAa,YAAT,MAAI;;EAEDD,KAAK,EAAC;AAAY;gCACrBC,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAU,GAAC,IAAE;;EAGrBF,KAAK,EAAC;AAAY;gCACrBC,mBAAA,CAAiC;EAA1BC,GAAG,EAAC;AAAU,GAAC,KAAG;;EAGtBF,KAAK,EAAC;AAAY;gCACrBC,mBAAA,CAAiC;EAA1BC,GAAG,EAAC;AAAO,GAAC,QAAM;;EAbjCC,GAAA;EAeoCH,KAAK,EAAC;;;EAE/BA,KAAK,EAAC;AAAY;iCACrBC,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAU,GAAC,UAAQ;;EAEzBF,KAAK,EAAC;AAAuB;;EAK7BA,KAAK,EAAC;AAAqB;;EAM7BA,KAAK,EAAC;AAAY;iCACrBC,mBAAA,CAA4C;EAArCC,GAAG,EAAC;AAAiB,GAAC,SAAO;;EAhC5CC,GAAA;EAkCmCH,KAAK,EAAC;;oBAlCzC;;uBACEI,mBAAA,CAqCM,OArCNC,UAqCM,GApCJC,UAAa,EACbL,mBAAA,CAkCO;IAlCAM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;MAC3BT,mBAAA,CAGM,OAHNY,UAGM,GAFJC,UAAgC,E,gBAChCb,mBAAA,CAA6D;IAAtDc,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,UAAU;IANxC,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAMkDC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAEG,QAAQ,EAAR;iDAAVF,KAAA,CAAAC,QAAQ,E,KAEpDlB,mBAAA,CAGM,OAHNoB,UAGM,GAFJC,UAAiC,E,gBACjCrB,mBAAA,CAA6D;IAAtDc,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,UAAU;IAVxC,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAUkDC,KAAA,CAAAK,QAAQ,GAAAN,MAAA;IAAEG,QAAQ,EAAR;iDAAVF,KAAA,CAAAK,QAAQ,E,KAEpDtB,mBAAA,CAIM,OAJNuB,UAIM,GAHJC,UAAiC,E,gBACjCxB,mBAAA,CAA8E;IAAvEc,IAAI,EAAC,OAAO;IAACC,EAAE,EAAC,OAAO;IAdtC,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAcgDC,KAAA,CAAAQ,KAAK,GAAAT,MAAA;IAAEG,QAAQ,EAAR,EAAQ;IAAEO,MAAI,EAAAnB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAiB,aAAA,IAAAjB,QAAA,CAAAiB,aAAA,IAAAlB,IAAA,CAAa;iEAApCQ,KAAA,CAAAQ,KAAK,E,GACpCR,KAAA,CAAAW,iBAAiB,I,cAA1BzB,mBAAA,CAA6E,KAA7E0B,UAA6E,EAAAC,gBAAA,CAAxBb,KAAA,CAAAW,iBAAiB,oBAf9EG,mBAAA,e,GAiBM/B,mBAAA,CAaM,OAbNgC,WAaM,GAZJC,WAAsC,E,gBACtCjC,mBAAA,CAA2F;IAApFc,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;IAnB5C,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAmBsDC,KAAA,CAAAiB,QAAQ,GAAAlB,MAAA;IAAEG,QAAQ,EAAR,EAAQ;IAAEgB,OAAK,EAAA5B,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAA0B,gBAAA,IAAA1B,QAAA,CAAA0B,gBAAA,IAAA3B,IAAA,CAAgB;iEAA3CQ,KAAA,CAAAiB,QAAQ,E,GACtDlC,mBAAA,CAIM,OAJNqC,WAIM,GAHJrC,mBAAA,CAAiJ;IAA3IsC,KAAK,EArBrBC,eAAA;MAAAC,KAAA,EAqBgCvB,KAAA,CAAAwB,iBAAiB;MAAAC,eAAA,EAAqCzB,KAAA,CAAAwB,iBAAiB;IAAA;IAAqB1C,KAAK,EAAC;2BACxHC,mBAAA,CAAuJ;IAAjJsC,KAAK,EAtBrBC,eAAA;MAAAC,KAAA,EAsBgCvB,KAAA,CAAA0B,oBAAoB;MAAAD,eAAA,EAAqCzB,KAAA,CAAA0B,oBAAoB;IAAA;IAAqB5C,KAAK,EAAC;2BAC9HC,mBAAA,CAAqK;IAA/JsC,KAAK,EAvBrBC,eAAA;MAAAC,KAAA,EAuBgCvB,KAAA,CAAA2B,2BAA2B;MAAAF,eAAA,EAAqCzB,KAAA,CAAA2B,2BAA2B;IAAA;IAAqB7C,KAAK,EAAC;6BAE9IC,mBAAA,CAIM,OAJN6C,WAIM,GAHJ7C,mBAAA,CAAqE;IAA9DD,KAAK,EA1BtB+C,eAAA;MAAA,iBA0B2C7B,KAAA,CAAAwB;IAAiB;KAAI,UAAQ,kBAC9DzC,mBAAA,CAAsE;IAA/DD,KAAK,EA3BtB+C,eAAA;MAAA,iBA2B2C7B,KAAA,CAAA0B;IAAoB;KAAI,QAAM,kBAC/D3C,mBAAA,CAA8E;IAAvED,KAAK,EA5BtB+C,eAAA;MAAA,iBA4B2C7B,KAAA,CAAA2B;IAA2B;KAAI,SAAO,iB,KAG3E5C,mBAAA,CAIM,OAJN+C,WAIM,GAHJC,WAA4C,E,gBAC5ChD,mBAAA,CAAgH;IAAzGc,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,iBAAiB;IAjCnD,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAiC6DC,KAAA,CAAAgC,eAAe,GAAAjC,MAAA;IAAEG,QAAQ,EAAR,EAAQ;IAAEgB,OAAK,EAAA5B,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAwC,uBAAA,IAAAxC,QAAA,CAAAwC,uBAAA,IAAAzC,IAAA,CAAuB;iEAAzDQ,KAAA,CAAAgC,eAAe,E,GAC3DhC,KAAA,CAAAkC,gBAAgB,I,cAAzBhD,mBAAA,CAAqE,KAArEiD,WAAqE,EAApB,kBAAgB,KAlCzErB,mBAAA,e,GAoCM/B,mBAAA,CAA0D;IAAjDqD,QAAQ,GAAG3C,QAAA,CAAA4C,SAAS;IAAExC,IAAI,EAAC;KAAS,MAAI,iBApCvDyC,WAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}