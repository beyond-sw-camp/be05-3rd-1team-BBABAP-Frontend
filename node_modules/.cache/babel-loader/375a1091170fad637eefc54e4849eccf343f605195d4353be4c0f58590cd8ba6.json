{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-59cf3461\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"post-details\"\n};\nconst _hoisted_2 = {\n  class: \"post-title\"\n};\nconst _hoisted_3 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CommentList = _resolveComponent(\"CommentList\");\n  const _component_CommentForm = _resolveComponent(\"CommentForm\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, _toDisplayString($data.board.title), 1 /* TEXT */), _createElementVNode(\"p\", {\n    class: \"post-content\",\n    innerHTML: $data.board.content\n  }, null, 8 /* PROPS */, _hoisted_3), $options.shouldShowDeleteButton ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.deletePost && $options.deletePost(...args))\n  }, \"삭제\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 댓글 목록 컴포넌트 \"), _createVNode(_component_CommentList, {\n    comments: $data.comments\n  }, null, 8 /* PROPS */, [\"comments\"]), _createCommentVNode(\" 댓글 작성 폼 컴포넌트 \"), _createVNode(_component_CommentForm, {\n    onCommentAdded: $options.fetchComments\n  }, null, 8 /* PROPS */, [\"onCommentAdded\"]), _createVNode(_component_router_link, {\n    to: \"/boardlist\",\n    class: \"back-link\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"뒤로 가기\")]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$data","board","title","innerHTML","content","_hoisted_3","$options","shouldShowDeleteButton","key","onClick","_cache","args","deletePost","_createCommentVNode","_createVNode","_component_CommentList","comments","_component_CommentForm","onCommentAdded","fetchComments","_component_router_link","to","default","_withCtx","_createTextVNode","_"],"sources":["C:\\encore\\vsc_java_workspace\\be05-3rd-1team-BBABAP-Frontend\\src\\views\\BoardView.vue"],"sourcesContent":["<template>\r\n  <div class=\"post-details\">\r\n    <h2 class=\"post-title\">{{ board.title }}</h2>\r\n    <p class=\"post-content\" v-html=\"board.content\"></p>\r\n    <button v-if=\"shouldShowDeleteButton\" @click=\"deletePost\">삭제</button>\r\n    \r\n    <!-- 댓글 목록 컴포넌트 -->\r\n    <CommentList :comments=\"comments\" />\r\n\r\n    <!-- 댓글 작성 폼 컴포넌트 -->\r\n    <CommentForm @comment-added=\"fetchComments\" />\r\n\r\n    <router-link to=\"/boardlist\" class=\"back-link\">뒤로 가기</router-link>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport CommentForm from '../components/CommentForm.vue';\r\nimport CommentList from '../components/CommentList.vue';\r\n\r\nexport default {\r\n  components: {\r\n    CommentForm,\r\n    CommentList\r\n  },\r\n  data() {\r\n    return {\r\n      board: {},\r\n      comments: []\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchPost();\r\n    this.fetchComments();\r\n  },\r\n  computed: {\r\n    ...mapGetters(['userNickname']),\r\n    shouldShowDeleteButton() {\r\n      return this.board.author === this.userNickname;\r\n    }\r\n  },\r\n  methods: {\r\n    fetchPost() {\r\n      const boardId = this.$route.params.id;\r\n      axios.get(`http://localhost:7777/boards/${boardId}`)\r\n        .then(response => {\r\n          this.board = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching post:', error);\r\n        });\r\n    },\r\n    fetchComments() {\r\n      const boardId = this.$route.params.id;\r\n      axios.get(`http://localhost:7777/boards/${boardId}/comments`)\r\n        .then(response => {\r\n          this.comments = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching comments:', error);\r\n        });\r\n    },\r\n    deletePost() {\r\n      const boardId = this.$route.params.id;\r\n      axios.delete(`http://localhost:7777/boards/${boardId}`)\r\n        .then(response => {\r\n          // 게시물 삭제 후 어떤 작업을 수행할 수 있음\r\n          // 예: 게시물 목록으로 이동\r\n          console.log(response);\r\n          this.$router.push('/boardlist');\r\n        })\r\n        .catch(error => {\r\n          console.error('Error deleting post:', error);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.post-details {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.post-title {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.post-content {\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.back-link {\r\n  display: inline-block;\r\n  color: #007bff;\r\n  text-decoration: none;\r\n  margin-top: 10px;\r\n}\r\n\r\n.back-link:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAc;;EACnBA,KAAK,EAAC;AAAY;mBAF1B;;;;;uBACEC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,mBAAA,CAA6C,MAA7CC,UAA6C,EAAAC,gBAAA,CAAnBC,KAAA,CAAAC,KAAK,CAACC,KAAK,kBACrCL,mBAAA,CAAmD;IAAhDH,KAAK,EAAC,cAAc;IAACS,SAAsB,EAAdH,KAAA,CAAAC,KAAK,CAACG;0BAH1CC,UAAA,GAIkBC,QAAA,CAAAC,sBAAsB,I,cAApCZ,mBAAA,CAAqE;IAJzEa,GAAA;IAI2CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,QAAA,CAAAM,UAAA,IAAAN,QAAA,CAAAM,UAAA,IAAAD,IAAA,CAAU;KAAE,IAAE,KAJhEE,mBAAA,gBAMIA,mBAAA,gBAAmB,EACnBC,YAAA,CAAoCC,sBAAA;IAAtBC,QAAQ,EAAEhB,KAAA,CAAAgB;EAAQ,uCAEhCH,mBAAA,kBAAqB,EACrBC,YAAA,CAA8CG,sBAAA;IAAhCC,cAAa,EAAEZ,QAAA,CAAAa;EAAa,6CAE1CL,YAAA,CAAkEM,sBAAA;IAArDC,EAAE,EAAC,YAAY;IAAC3B,KAAK,EAAC;;IAZvC4B,OAAA,EAAAC,QAAA,CAYmD,MAAK,CAZxDC,gBAAA,CAYmD,OAAK,E;IAZxDC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}