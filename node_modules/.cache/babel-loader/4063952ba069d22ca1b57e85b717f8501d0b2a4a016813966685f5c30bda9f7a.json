{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      boards: [],\n      currentPage: 1,\n      perPage: 10\n    };\n  },\n  computed: {\n    // 표시되는 게시물 목록\n    displayedBoards() {\n      const startIndex = (this.currentPage - 1) * this.perPage;\n      const endIndex = this.currentPage * this.perPage;\n      return this.boards.slice(startIndex, endIndex);\n    },\n    // 전체 페이지 수\n    totalPages() {\n      return Math.ceil(this.boards.length / this.perPage);\n    }\n  },\n  mounted() {\n    // 컴포넌트가 마운트되면 사용자의 게시물을 가져옵니다.\n    this.fetchUserBoards();\n  },\n  methods: {\n    // 사용자의 게시물을 가져오는 메서드\n    fetchUserBoards() {\n      // 사용자의 정보를 가져오는 API 호출\n      axios.get('http://localhost:3000/users').then(response => {\n        // 사용자의 ID를 통해 해당 사용자가 작성한 게시물을 가져오는 API 호출\n        axios.get(`http://localhost:7777/boards?username=${response.data.username}`).then(response => {\n          // 가져온 게시물을 저장합니다.\n          this.boards = response.data;\n        }).catch(error => {\n          console.error('Error fetching user boards:', error);\n        });\n      }).catch(error => {\n        console.error('Error fetching user info:', error);\n      });\n    },\n    // 페이지를 설정하는 메서드\n    setPage(page) {\n      this.currentPage = page;\n    },\n    // 이전 페이지로 이동하는 메서드\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    // 다음 페이지로 이동하는 메서드\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    // 새로운 게시물 작성 페이지로 이동하는 메서드\n    goToPostForm() {\n      this.$router.push('/post/new');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","boards","currentPage","perPage","computed","displayedBoards","startIndex","endIndex","slice","totalPages","Math","ceil","length","mounted","fetchUserBoards","methods","get","then","response","username","catch","error","console","setPage","page","prevPage","nextPage","goToPostForm","$router","push"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\MyPosts.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h2>나의 게시글</h2>\n    <table class=\"table\">\n      <!-- 테이블 헤더 -->\n      <thead>\n      <tr>\n        <th>ID</th>\n        <th>제목</th>\n        <th>작성자</th>\n        <th>작성일</th>\n      </tr>\n      </thead>\n      <!-- 테이블 바디 -->\n      <tbody>\n      <tr v-for=\"board in displayedBoards\" :key=\"board.id\">\n        <td>{{ board.id }}</td>\n        <td><router-link :to=\"'/board/' + board.id\">{{ board.title }}</router-link></td>\n        <td>{{ board.author }}</td>\n        <td>{{ board.created_date }}</td>\n      </tr>\n      </tbody>\n    </table>\n    <!-- 페이지네이션 -->\n    <div class=\"pagination\">\n      <button v-if=\"currentPage > 1\" @click=\"prevPage\" class=\"pagination-btn\">이전</button>\n      <button v-for=\"page in totalPages\" :key=\"page\" @click=\"setPage(page)\" :class=\"{ 'pagination-btn': true, 'active': currentPage === page }\">{{ page }}</button>\n      <button v-if=\"currentPage < totalPages\" @click=\"nextPage\" class=\"pagination-btn\">다음</button>\n    </div>\n    <br>\n\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boards: [],\n      currentPage: 1,\n      perPage: 10\n    };\n  },\n  computed: {\n    // 표시되는 게시물 목록\n    displayedBoards() {\n      const startIndex = (this.currentPage - 1) * this.perPage;\n      const endIndex = this.currentPage * this.perPage;\n      return this.boards.slice(startIndex, endIndex);\n    },\n    // 전체 페이지 수\n    totalPages() {\n      return Math.ceil(this.boards.length / this.perPage);\n    }\n  },\n  mounted() {\n    // 컴포넌트가 마운트되면 사용자의 게시물을 가져옵니다.\n    this.fetchUserBoards();\n  },\n  methods: {\n    // 사용자의 게시물을 가져오는 메서드\n    fetchUserBoards() {\n      // 사용자의 정보를 가져오는 API 호출\n      axios.get('http://localhost:3000/users')\n          .then(response => {\n            // 사용자의 ID를 통해 해당 사용자가 작성한 게시물을 가져오는 API 호출\n            axios.get(`http://localhost:7777/boards?username=${response.data.username}`)\n                .then(response => {\n                  // 가져온 게시물을 저장합니다.\n                  this.boards = response.data;\n                })\n                .catch(error => {\n                  console.error('Error fetching user boards:', error);\n                });\n          })\n          .catch(error => {\n            console.error('Error fetching user info:', error);\n          });\n    },\n    // 페이지를 설정하는 메서드\n    setPage(page) {\n      this.currentPage = page;\n    },\n    // 이전 페이지로 이동하는 메서드\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    // 다음 페이지로 이동하는 메서드\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    // 새로운 게시물 작성 페이지로 이동하는 메서드\n    goToPostForm() {\n      this.$router.push('/post/new');\n    }\n  }\n};\n</script>\n\n<style>\n.container {\n  margin: 20px auto;\n  width: 80%;\n}\n\n.table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.table th, .table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\n.table th {\n  background-color: #f2f2f2;\n}\n\n.pagination {\n  margin-top: 20px;\n  text-align: center;\n}\n\n.pagination-btn {\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 16px;\n  border: none;\n  cursor: pointer;\n}\n\n.pagination-btn:hover {\n  background-color: #45a049;\n}\n\n.active {\n  background-color: #45a049;\n}\n\n.add-btn {\n  background-color: #008CBA;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  margin-top: 20px;\n}\n\n.add-btn:hover {\n  background-color: #00698C;\n}\n</style>\n"],"mappings":";AAmCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,CAAC;MACdC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,eAAeA,CAAA,EAAG;MAChB,MAAMC,UAAS,GAAI,CAAC,IAAI,CAACJ,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,OAAO;MACxD,MAAMI,QAAO,GAAI,IAAI,CAACL,WAAU,GAAI,IAAI,CAACC,OAAO;MAChD,OAAO,IAAI,CAACF,MAAM,CAACO,KAAK,CAACF,UAAU,EAAEC,QAAQ,CAAC;IAChD,CAAC;IACD;IACAE,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACV,MAAM,CAACW,MAAK,GAAI,IAAI,CAACT,OAAO,CAAC;IACrD;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACP;IACAD,eAAeA,CAAA,EAAG;MAChB;MACAf,KAAK,CAACiB,GAAG,CAAC,6BAA6B,EAClCC,IAAI,CAACC,QAAO,IAAK;QAChB;QACAnB,KAAK,CAACiB,GAAG,CAAE,yCAAwCE,QAAQ,CAAClB,IAAI,CAACmB,QAAS,EAAC,EACtEF,IAAI,CAACC,QAAO,IAAK;UAChB;UACA,IAAI,CAACjB,MAAK,GAAIiB,QAAQ,CAAClB,IAAI;QAC7B,CAAC,EACAoB,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD,CAAC,CAAC;MACR,CAAC,EACAD,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CAAC;IACR,CAAC;IACD;IACAE,OAAOA,CAACC,IAAI,EAAE;MACZ,IAAI,CAACtB,WAAU,GAAIsB,IAAI;IACzB,CAAC;IACD;IACAC,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACvB,WAAU,GAAI,CAAC,EAAE;QACxB,IAAI,CAACA,WAAW,EAAE;MACpB;IACF,CAAC;IACD;IACAwB,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACxB,WAAU,GAAI,IAAI,CAACO,UAAU,EAAE;QACtC,IAAI,CAACP,WAAW,EAAE;MACpB;IACF,CAAC;IACD;IACAyB,YAAYA,CAAA,EAAG;MACb,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;IAChC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}