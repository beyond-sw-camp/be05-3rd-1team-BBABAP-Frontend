{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-9bda156e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"BBABAP\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"td\", null, \"주소검색\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  colspan: \"3\"\n};\nconst _hoisted_4 = {\n  ref: \"map\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"700px\"\n  }\n};\nconst _hoisted_5 = {\n  id: \"searchResults\"\n};\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"table\", null, [_createElementVNode(\"tr\", null, [_createCommentVNode(\"주소 검색창\"), _hoisted_2, _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.address = $event),\n    onKeydown: _cache[1] || (_cache[1] = _withKeys((...args) => $options.searchAddress && $options.searchAddress(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.address]])]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.searchAddress && $options.searchAddress(...args))\n  }, \"검색\")])]), _createElementVNode(\"tr\", null, [_createCommentVNode(\"내 위치로 이동하는 버튼\"), _createElementVNode(\"td\", _hoisted_3, [_createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.findMyLocation && $options.findMyLocation(...args))\n  }, \"내 위치로\")])])]), _createCommentVNode(\"카카오 맵을 표시할 영역\"), _createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */), _createCommentVNode(\" 검색 결과를 표시할 팝업 리스트 \"), _createElementVNode(\"div\", _hoisted_5, [$data.searchResult.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.searchResult, result => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: result.place_name\n    }, [_createElementVNode(\"a\", {\n      href: \"#\",\n      onClick: $event => $options.moveToLocation(result.y, result.x)\n    }, _toDisplayString(result.place_name), 9 /* TEXT, PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"검색 결과가 없습니다. 주소를 다시 확인해주세요.\"))])]);\n}","map":{"version":3,"names":["_createElementVNode","colspan","ref","style","id","key","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","type","_cache","$event","$data","address","onKeydown","_withKeys","args","$options","searchAddress","onClick","_hoisted_3","findMyLocation","_hoisted_4","_hoisted_5","searchResult","length","_hoisted_6","_Fragment","_renderList","result","place_name","href","moveToLocation","y","x","_hoisted_7","_hoisted_8"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\KakaoMap.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>BBABAP</h1>\r\n    <table>\r\n      <tr><!--주소 검색창-->\r\n        <td>주소검색</td>\r\n        <td><input type=\"text\" v-model=\"address\" @keydown.enter=\"searchAddress\" /></td>\r\n        <td><button type=\"button\" @click=\"searchAddress\">검색</button></td>\r\n      </tr>\r\n      <tr><!--내 위치로 이동하는 버튼-->\r\n        <td colspan=\"3\"><button type=\"button\" @click=\"findMyLocation\">내 위치로</button></td>\r\n      </tr>\r\n    </table>\r\n    <!--카카오 맵을 표시할 영역-->\r\n    <div ref=\"map\" style=\"width:100%;height:700px;\"></div>\r\n    <!-- 검색 결과를 표시할 팝업 리스트 -->\r\n    <div id=\"searchResults\">\r\n      <ul v-if=\"searchResult.length > 0\">\r\n        <li v-for=\"result in searchResult\" :key=\"result.place_name\">\r\n          <a href=\"#\" @click=\"moveToLocation(result.y, result.x)\">{{ result.place_name }}</a>\r\n        </li>\r\n      </ul>\r\n      <p v-else>검색 결과가 없습니다. 주소를 다시 확인해주세요.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      marker: null,\r\n      infowindow: null,\r\n      currentCircle: null,\r\n      address: '',\r\n      searchResult: [],\r\n      markers: []\r\n    };\r\n  },\r\n  mounted() {\r\n    kakao.maps.load(() => {\r\n      this.initMap();\r\n      this.findMyLocation();\r\n    });\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 지도 초기 세팅\r\n      this.map = new kakao.maps.Map(this.$refs.map, {\r\n        center: new kakao.maps.LatLng(33.450701, 126.570667),\r\n        level: 3\r\n      });\r\n      this.marker = new kakao.maps.Marker();\r\n      this.infowindow = new kakao.maps.InfoWindow({ removable: true });\r\n    },\r\n    displayCircle(lat, lon) {\r\n      // 반경 표시\r\n      if (this.currentCircle !== null) {\r\n        this.currentCircle.setMap(null);\r\n      }\r\n      this.currentCircle = new kakao.maps.Circle({\r\n        center: new kakao.maps.LatLng(lat, lon),\r\n        radius: 1000,\r\n        strokeWeight: 5,\r\n        strokeColor: '#75B8FA',\r\n        strokeOpacity: 1,\r\n        strokeStyle: 'dashed',\r\n        fillColor: '#CFE7FF',\r\n        fillOpacity: 0.7\r\n      });\r\n      this.currentCircle.setMap(this.map);\r\n    },\r\n    displayMarker(locPosition, message) {\r\n      // 마커 표시\r\n      this.marker.setMap(this.map);\r\n      this.marker.setPosition(locPosition);\r\n\r\n      // 인포윈도우 설정\r\n      this.infowindow.setContent(message);\r\n      this.infowindow.open(this.map, this.marker);\r\n\r\n      // 지도 중심 위치 설정\r\n      this.map.setCenter(locPosition);\r\n\r\n      // 마커 클릭 이벤트 등록\r\n      kakao.maps.event.addListener(this.marker, 'click', () => {\r\n        // 마커 클릭 시 주소 정보 가져오기\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        geocoder.coord2Address(locPosition.getLng(), locPosition.getLat(), (result, status) => {\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            let detailAddr = result[0].road_address ?\r\n              `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` :\r\n              '';\r\n            detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div>` +\r\n              `<button id=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\r\n\r\n            // 인포윈도우에 상세 주소 정보 표시\r\n            this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\r\n\r\n            // 즐겨찾기 버튼 클릭 이벤트 리스너\r\n        const addFavoriteButtons = document.querySelectorAll('.addFavorite');\r\n        addFavoriteButtons.forEach(button => {\r\n          button.addEventListener('click', () => {\r\n            alert(\"즐겨찾기 버튼 클릭\");\r\n          });\r\n        });\r\n        }\r\n        });\r\n      });\r\n    },\r\n    findMyLocation() {\r\n      // 현재 위치 찾기\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          position => {\r\n            const lat = position.coords.latitude;\r\n            const lon = position.coords.longitude;\r\n            const locPosition = new kakao.maps.LatLng(lat, lon);\r\n            const message = '<div class=\"infoWindow\">현재 나의 위치</div>';\r\n            this.displayMarker(locPosition, message);\r\n            this.displayCircle(lat, lon);\r\n          },\r\n          error => {\r\n            console.error(error);\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: Infinity\r\n          }\r\n        );\r\n      } else {\r\n        alert('geolocation을 사용할 수 없습니다.');\r\n      }\r\n    },\r\n    searchAddress() {\r\n      const addr = this.address;\r\n      alert(\"검색한 주소 : \"+ addr);\r\n      // kakao maps Places 객체 생성\r\n      const places = new kakao.maps.services.Places();\r\n      // 주소 검색 요청\r\n      places.keywordSearch(addr, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          if (result.length > 1) { // 검색 결과가 여러 개인 경우\r\n            // 검색 결과 리스트 설정\r\n            this.searchResult = result;\r\n          } else if (result.length === 1) { // 검색 결과가 하나인 경우\r\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            this.displayMarker(coords, result[0].address_name);\r\n            this.displayCircle(result[0].y, result[0].x);\r\n            // 지번 주소 출력\r\n            const geocoder = new kakao.maps.services.Geocoder();\r\n            geocoder.coord2Address(result[0].x, result[0].y, (result, status) => {\r\n              if (status === kakao.maps.services.Status.OK) {\r\n                const address = result[0].address.address_name;\r\n                alert(\"선택한 위치의 지번 주소: \" + address);\r\n                // 주소를 시/도 까지만 잘라내기\r\n                const slicedAddr = address.split(' ').slice(0, 2).join(' ');\r\n                // AJAX 통신으로 잘라낸 지번 주소 데이터 전달\r\n                this.fetchChargerData(slicedAddr);\r\n              }\r\n            });\r\n          } else {\r\n            alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\r\n          }\r\n        } else {\r\n          alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\r\n        }\r\n      });\r\n    },\r\n    moveToLocation(lat, lon) {\r\n      // 위치 이동\r\n      const locPosition = new kakao.maps.LatLng(lat, lon);\r\n      const message = '<div class=\"infoWindow\">검색 결과 위치</div>';\r\n      this.displayMarker(locPosition, message);\r\n      this.displayCircle(lat, lon);\r\n\r\n      // 좌표를 주소로 변환하여 API 호출\r\n      const geocoder = new kakao.maps.services.Geocoder();\r\n      geocoder.coord2Address(lon, lat, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          const address = result[0].address.address_name;\r\n          const slicedAddr = address.split(' ').slice(0, 1).join(' ');\r\n          this.fetchChargerData(slicedAddr);\r\n        }\r\n      });\r\n    },\r\n    fetchChargerData(address) {\r\n      // 주소를 이용하여 충전소 데이터 가져오기\r\n      axios.get(`http://localhost:7777/bbabap/getchargeraddress/${address}`)\r\n        .then(response => {\r\n          const data = response.data;\r\n          console.log('Charger Info:', data);\r\n          // 가져온 데이터로 마커 표시\r\n          this.displayMarkersWithAddresses(data.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching charger data:', error);\r\n        });\r\n    },\r\n    displayMarkersWithAddresses(dataArray) {\r\n    // 배열에 있는 각 데이터에 대해 반복하며 마커를 표시\r\n    dataArray.forEach(charger => {\r\n      // 주소를 이용하여 지도에 마커를 생성하고 표시\r\n      const geocoder = new kakao.maps.services.Geocoder();\r\n      geocoder.addressSearch(charger.주소, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n          // 마커 생성\r\n          const marker = new kakao.maps.Marker({\r\n            position: coords\r\n          });\r\n          // 마커를 지도에 표시\r\n          marker.setMap(this.map);\r\n          // 마커 클릭 시 정보창에 주소 정보와 즐겨찾기 버튼을 함께 출력\r\n          kakao.maps.event.addListener(marker, 'click', () => {\r\n            // 마커의 좌표 정보를 사용하여 주소 정보를 요청.\r\n            geocoder.coord2Address(marker.getPosition().getLng(), marker.getPosition().getLat(), (result, status) => {\r\n              if (status === kakao.maps.services.Status.OK) {\r\n                let detailAddr = result[0].road_address ?\r\n                  `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` :\r\n                  '';\r\n                detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div><button class=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\r\n                // 인포윈도우에 상세 주소 정보를 표시합니다\r\n                this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${charger.충전소명}</div><div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\r\n                this.infowindow.open(this.map, marker);\r\n                // 즐겨찾기 버튼 클릭 이벤트 리스너\r\n                const addFavoriteButtons = document.querySelectorAll('.addFavorite');\r\n                addFavoriteButtons.forEach(button => {\r\n                  button.addEventListener('click', () => {\r\n                    alert(\"즐겨찾기 버튼 클릭\");\r\n                  });\r\n                });\r\n              }\r\n            });\r\n          });\r\n          // 마커를 클릭했을 때 정보창을 열기 위한 내용 설정\r\n          const message = `<div class=\"infoWindow\">${charger.충전소명}</div>`;\r\n          this.infowindow.setContent(message);\r\n          this.infowindow.open(this.map, marker);//지도에 정보창 표시\r\n        }\r\n      });\r\n    });\r\n  },\r\n    findMyLocbtn() {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          position => {\r\n            const lat = position.coords.latitude;\r\n            const lon = position.coords.longitude;\r\n            const locPosition = new kakao.maps.LatLng(lat, lon);\r\n            const message = '<div class=\"infoWindow\">현재 위치</div>';\r\n            this.displayMarker(locPosition, message);\r\n            this.displayCircle(lat, lon);\r\n          },\r\n          error => {\r\n            console.error(error);\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: Infinity\r\n          }\r\n        );\r\n      } else {\r\n        alert('geolocation을 사용할 수 없어요..');\r\n      }\r\n    },\r\n    removeMarkersbtn() {\r\n      // 이전에 생성된 모든 마커를 지도에서 제거합니다.\r\n      this.markers.forEach(marker => {\r\n        // 클릭 이벤트 리스너를 함께 제거합니다.\r\n        kakao.maps.event.removeListener(marker, 'click');\r\n        marker.setMap(null);\r\n      });\r\n      // 배열을 비워줍니다.\r\n      this.markers = [];\r\n    },\r\n    handleKeyDown(event) {\r\n    if (event.key === \"Enter\") {\r\n      this.searchAddress();\r\n    }\r\n  }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n  .infoWindow {\r\n    padding: 5px;\r\n    border: 1px solid #CCCCCC;\r\n    border-radius: 5px;\r\n    width: auto;\r\n    min-width: 150px;\r\n    max-width: 400px;\r\n    word-wrap: break-word;\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n"],"mappings":";;gEAEIA,mBAAA,CAAe,YAAX,QAAM;gEAGNA,mBAAA,CAAa,YAAT,MAAI;;EAKJC,OAAO,EAAC;AAAG;;EAIdC,GAAG,EAAC,KAAK;EAACC,KAAgC,EAAhC;IAAA;IAAA;EAAA;;;EAEVC,EAAE,EAAC;AAAe;;EAhB3BC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAuBM,cAtBJC,UAAe,EACfP,mBAAA,CASQ,gBARNA,mBAAA,CAIK,aAJDQ,mBAAA,UAAa,EACfC,UAAa,EACbT,mBAAA,CAA+E,a,gBAA3EA,mBAAA,CAAsE;IAA/DU,IAAI,EAAC,MAAM;IAN9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMwCC,KAAA,CAAAC,OAAO,GAAAF,MAAA;IAAGG,SAAO,EAAAJ,MAAA,QAAAA,MAAA,MANzDK,SAAA,KAAAC,IAAA,KAMiEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;iEAAtCJ,KAAA,CAAAC,OAAO,E,KACvCd,mBAAA,CAAiE,aAA7DA,mBAAA,CAAwD;IAAhDU,IAAI,EAAC,QAAQ;IAAEU,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,IAAE,E,KAErDjB,mBAAA,CAEK,aAFDQ,mBAAA,iBAAoB,EACtBR,mBAAA,CAAiF,MAAjFqB,UAAiF,GAAjErB,mBAAA,CAA4D;IAApDU,IAAI,EAAC,QAAQ;IAAEU,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAI,cAAA,IAAAJ,QAAA,CAAAI,cAAA,IAAAL,IAAA,CAAc;KAAE,OAAK,E,OAGvET,mBAAA,iBAAoB,EACpBR,mBAAA,CAAsD,OAAtDuB,UAAsD,+BACtDf,mBAAA,uBAA0B,EAC1BR,mBAAA,CAOM,OAPNwB,UAOM,GANMX,KAAA,CAAAY,YAAY,CAACC,MAAM,Q,cAA7BpB,mBAAA,CAIK,MArBXqB,UAAA,I,kBAkBQrB,mBAAA,CAEKsB,SAAA,QApBbC,WAAA,CAkB6BhB,KAAA,CAAAY,YAAY,EAAtBK,MAAM;yBAAjBxB,mBAAA,CAEK;MAF+BD,GAAG,EAAEyB,MAAM,CAACC;QAC9C/B,mBAAA,CAAmF;MAAhFgC,IAAI,EAAC,GAAG;MAAEZ,OAAK,EAAAR,MAAA,IAAEM,QAAA,CAAAe,cAAc,CAACH,MAAM,CAACI,CAAC,EAAEJ,MAAM,CAACK,CAAC;wBAAML,MAAM,CAACC,UAAU,wBAnBtFK,UAAA,E;qDAsBM9B,mBAAA,CAAyC,KAtB/C+B,UAAA,EAsBgB,6BAA2B,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}