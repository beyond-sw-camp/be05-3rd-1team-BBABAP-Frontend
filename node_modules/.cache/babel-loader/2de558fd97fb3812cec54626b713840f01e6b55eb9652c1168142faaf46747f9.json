{"ast":null,"code":"export default {\n  data() {\n    return {\n      userInfo: {\n        id: '',\n        // 사용자 ID\n        username: '',\n        nickname: '',\n        email: ''\n      },\n      password: '',\n      passwordConfirm: '',\n      emailErrorMessage: '',\n      passwordMismatch: false,\n      passwordLengthMet: false,\n      passwordUpperCaseMet: false,\n      passwordSpecialCharacterMet: false,\n      passwordConditionsMet: 0,\n      editMode: false,\n      disableInput: true // 수정 모드일 때 입력 필드 활성화 여부\n    };\n  },\n  computed: {\n    canSubmit() {\n      return this.userInfo.username && this.userInfo.nickname && this.userInfo.email && this.password && this.passwordConfirm && !this.emailErrorMessage && !this.passwordMismatch && this.passwordConditionsMet === 3;\n    }\n  },\n  methods: {\n    async checkUsername() {\n      try {\n        const response = await fetch(`http://localhost:3000/users?username=${this.userInfo.username}`);\n        if (response.ok) {\n          const userData = await response.json();\n          this.usernameExists = userData.length > 0;\n        } else {\n          console.error('아이디 중복 검사 오류');\n        }\n      } catch (error) {\n        console.error('아이디 중복 검사 오류:', error);\n      }\n    },\n    async updateUserInfo() {\n      // 유효성 검사\n      if (!this.canSubmit) {\n        console.error('모든 필드를 올바르게 입력하세요.');\n        return;\n      }\n\n      // 실제 업데이트 로직\n      try {\n        const response = await fetch(`http://localhost:3000/users/${this.userInfo.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.userInfo.username,\n            nickname: this.userInfo.nickname,\n            email: this.userInfo.email,\n            password: this.password\n          })\n        });\n        if (response.ok) {\n          console.log('회원 정보 변경 성공');\n          this.toggleInput();\n        } else {\n          console.error('회원 정보 변경 실패');\n        }\n      } catch (error) {\n        console.error('회원 정보 변경 오류:', error);\n      }\n    },\n    validateEmail() {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.userInfo.email)) {\n        this.emailErrorMessage = '올바른 이메일을 입력하세요.';\n      } else {\n        this.emailErrorMessage = '';\n      }\n    },\n    validatePassword() {\n      this.passwordLengthMet = this.password.length >= 4;\n      this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\n      this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\n      this.passwordConditionsMet = [this.passwordLengthMet, this.passwordUpperCaseMet, this.passwordSpecialCharacterMet].filter(condition => condition).length;\n    },\n    validatePasswordConfirm() {\n      this.passwordMismatch = this.password !== this.passwordConfirm;\n    },\n    toggleInput() {\n      this.editMode = !this.editMode;\n      this.disableInput = !this.disableInput; // 수정 모드일 때 입력 필드 활성화 여부 변경\n    }\n  }\n};","map":{"version":3,"names":["data","userInfo","id","username","nickname","email","password","passwordConfirm","emailErrorMessage","passwordMismatch","passwordLengthMet","passwordUpperCaseMet","passwordSpecialCharacterMet","passwordConditionsMet","editMode","disableInput","computed","canSubmit","methods","checkUsername","response","fetch","ok","userData","json","usernameExists","length","console","error","updateUserInfo","method","headers","body","JSON","stringify","log","toggleInput","validateEmail","emailRegex","test","validatePassword","filter","condition","validatePasswordConfirm"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\UserInfo.vue"],"sourcesContent":["<template>\n    <div class=\"user-info\">\n      <h2>회원 정보 변경</h2>\n      <form @submit.prevent=\"updateUserInfo\">\n        <div class=\"form-group\">\n          <label for=\"username\">ID</label>\n          <input type=\"text\" id=\"username\" v-model=\"userInfo.username\" :disabled=\"disableInput\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"nickname\">닉네임</label>\n          <input type=\"text\" id=\"nickname\" v-model=\"userInfo.nickname\" :disabled=\"disableInput\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">E-MAIL</label>\n          <input type=\"email\" id=\"email\" v-model=\"userInfo.email\" :disabled=\"disableInput\" required @blur=\"validateEmail\">\n          <p v-if=\"emailErrorMessage\" class=\"error-message\">{{ emailErrorMessage }}</p>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">새 비밀번호</label>\n          <input type=\"password\" id=\"password\" v-model=\"password\" :disabled=\"disableInput\" required @input=\"validatePassword\">\n          <div class=\"password-strength-bar\">\n            <div :style=\"{ width: passwordLengthMet ? '33.33%' : '0%', backgroundColor: passwordLengthMet ? '#6f9e5e' : '' }\" class=\"strength-meter-1\"></div>\n            <div :style=\"{ width: passwordUpperCaseMet ? '33.33%' : '0%', backgroundColor: passwordUpperCaseMet ? '#6f9e5e' : '' }\" class=\"strength-meter-2\"></div>\n            <div :style=\"{ width: passwordSpecialCharacterMet ? '33.33%' : '0%', backgroundColor: passwordSpecialCharacterMet ? '#6f9e5e' : '' }\" class=\"strength-meter-3\"></div>\n          </div>\n          <div class=\"password-conditions\">\n            <span :class=\"{ 'condition-met': passwordLengthMet }\">최소 4자 이상</span>\n            <span :class=\"{ 'condition-met': passwordUpperCaseMet }\">대문자 포함</span>\n            <span :class=\"{ 'condition-met': passwordSpecialCharacterMet }\">특수문자 포함</span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"passwordConfirm\">비밀번호 확인</label>\n          <input type=\"password\" id=\"passwordConfirm\" v-model=\"passwordConfirm\" :disabled=\"disableInput\" required @input=\"validatePasswordConfirm\">\n          <p v-if=\"passwordMismatch\" class=\"error-message\">비밀번호가 일치하지 않습니다.</p>\n        </div>\n        <button type=\"button\" @click=\"toggleInput\" v-if=\"!editMode\">수정</button>\n        <button type=\"submit\" v-if=\"editMode\" :disabled=\"!canSubmit\">변경</button>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        userInfo: {\n          id: '', // 사용자 ID\n          username: '',\n          nickname: '',\n          email: ''\n        },\n        password: '',\n        passwordConfirm: '',\n        emailErrorMessage: '',\n        passwordMismatch: false,\n        passwordLengthMet: false,\n        passwordUpperCaseMet: false,\n        passwordSpecialCharacterMet: false,\n        passwordConditionsMet: 0,\n        editMode: false,\n        disableInput: true // 수정 모드일 때 입력 필드 활성화 여부\n      };\n    },\n    computed: {\n      canSubmit() {\n        return (\n          this.userInfo.username &&\n          this.userInfo.nickname &&\n          this.userInfo.email &&\n          this.password &&\n          this.passwordConfirm &&\n          !this.emailErrorMessage &&\n          !this.passwordMismatch &&\n          this.passwordConditionsMet === 3\n        );\n      }\n    },\n    methods: {\n    async checkUsername() {\n      try {\n        const response = await fetch(`http://localhost:3000/users?username=${this.userInfo.username}`);\n\n        if (response.ok) {\n          const userData = await response.json();\n          this.usernameExists = userData.length > 0;\n        } else {\n          console.error('아이디 중복 검사 오류');\n        }\n      } catch (error) {\n        console.error('아이디 중복 검사 오류:', error);\n      }\n    },\n      async updateUserInfo() {\n        // 유효성 검사\n        if (!this.canSubmit) {\n          console.error('모든 필드를 올바르게 입력하세요.');\n          return;\n        }\n  \n        // 실제 업데이트 로직\n        try {\n          const response = await fetch(`http://localhost:3000/users/${this.userInfo.id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              username: this.userInfo.username,\n              nickname: this.userInfo.nickname,\n              email: this.userInfo.email,\n              password: this.password\n            })\n          });\n  \n          if (response.ok) {\n            console.log('회원 정보 변경 성공');\n            this.toggleInput();\n          } else {\n            console.error('회원 정보 변경 실패');\n          }\n        } catch (error) {\n          console.error('회원 정보 변경 오류:', error);\n        }\n      },\n      validateEmail() {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n        if (!emailRegex.test(this.userInfo.email)) {\n          this.emailErrorMessage = '올바른 이메일을 입력하세요.';\n        } else {\n          this.emailErrorMessage = '';\n        }\n      },\n      validatePassword() {\n        this.passwordLengthMet = this.password.length >= 4;\n        this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\n        this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\n        this.passwordConditionsMet = [\n          this.passwordLengthMet,\n          this.passwordUpperCaseMet,\n          this.passwordSpecialCharacterMet\n        ].filter(condition => condition).length;\n      },\n      validatePasswordConfirm() {\n        this.passwordMismatch = this.password !== this.passwordConfirm;\n      },\n      toggleInput() {\n        this.editMode = !this.editMode;\n        this.disableInput = !this.disableInput; // 수정 모드일 때 입력 필드 활성화 여부 변경\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .user-info {\n    padding: 20px;\n  }\n  \n  .form-group {\n    margin-bottom: 20px;\n  }\n  \n  input[type=\"text\"],\n  input[type=\"email\"],\n  input[type=\"password\"] {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n  \n  button {\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  button:hover {\n    background-color: #0056b3;\n  }\n  \n  button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}