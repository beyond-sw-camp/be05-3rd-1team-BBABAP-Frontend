{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"나의 게시글\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"table\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"제목\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"작성자\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"작성일\")])], -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"pagination\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"table\", _hoisted_3, [_createCommentVNode(\" 테이블 헤더 \"), _hoisted_4, _createCommentVNode(\" 테이블 바디 \"), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.displayedBoards, board => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: board.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(board.id), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createVNode(_component_router_link, {\n      to: '/board/' + board.id\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(board.title), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"])]), _createElementVNode(\"td\", null, _toDisplayString(board.author), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(board.created_date), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 페이지네이션 \"), _createElementVNode(\"div\", _hoisted_5, [$data.currentPage > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.prevPage && $options.prevPage(...args)),\n    class: \"pagination-btn\"\n  }, \"이전\")) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.totalPages, page => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: page,\n      onClick: $event => $options.setPage(page),\n      class: _normalizeClass({\n        'pagination-btn': true,\n        'active': $data.currentPage === page\n      })\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */)), $data.currentPage < $options.totalPages ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.nextPage && $options.nextPage(...args)),\n    class: \"pagination-btn\"\n  }, \"다음\")) : _createCommentVNode(\"v-if\", true)]), _hoisted_7]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createCommentVNode","_hoisted_4","_Fragment","_renderList","$options","displayedBoards","board","key","id","_toDisplayString","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","title","_","author","created_date","_hoisted_5","$data","currentPage","onClick","_cache","args","prevPage","totalPages","page","$event","setPage","_normalizeClass","_hoisted_6","nextPage","_hoisted_7"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\MyPosts.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h2>나의 게시글</h2>\n    <table class=\"table\">\n      <!-- 테이블 헤더 -->\n      <thead>\n      <tr>\n        <th>ID</th>\n        <th>제목</th>\n        <th>작성자</th>\n        <th>작성일</th>\n      </tr>\n      </thead>\n      <!-- 테이블 바디 -->\n      <tbody>\n      <tr v-for=\"board in displayedBoards\" :key=\"board.id\">\n        <td>{{ board.id }}</td>\n        <td><router-link :to=\"'/board/' + board.id\">{{ board.title }}</router-link></td>\n        <td>{{ board.author }}</td>\n        <td>{{ board.created_date }}</td>\n      </tr>\n      </tbody>\n    </table>\n    <!-- 페이지네이션 -->\n    <div class=\"pagination\">\n      <button v-if=\"currentPage > 1\" @click=\"prevPage\" class=\"pagination-btn\">이전</button>\n      <button v-for=\"page in totalPages\" :key=\"page\" @click=\"setPage(page)\" :class=\"{ 'pagination-btn': true, 'active': currentPage === page }\">{{ page }}</button>\n      <button v-if=\"currentPage < totalPages\" @click=\"nextPage\" class=\"pagination-btn\">다음</button>\n    </div>\n    <br>\n\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { mapGetters } from 'vuex';\n\nexport default {\n  data() {\n    return {\n      boards: [],\n      currentPage: 1,\n      perPage: 10\n    };\n  },\n  computed: {\n    // userNickname getter를 가져옴\n    ...mapGetters(['userNickname']),\n    // 표시되는 게시물 목록\n    displayedBoards() {\n      const startIndex = (this.currentPage - 1) * this.perPage;\n      const endIndex = this.currentPage * this.perPage;\n      return this.boards.slice(startIndex, endIndex);\n    },\n    // 전체 페이지 수\n    totalPages() {\n      return Math.ceil(this.boards.length / this.perPage);\n    }\n  },\n  mounted() {\n    // 컴포넌트가 마운트되면 사용자의 게시물을 가져옵니다.\n    this.fetchUserBoards();\n  },\n  methods: {\n    // 사용자의 게시물을 가져오는 메서드\n    fetchUserBoards() {\n      // 사용자의 정보를 가져오는 API 호출\n      axios.get('http://localhost:3000/users')\n          .then(response => {\n            // 사용자의 닉네임을 가져옴\n            const userNickname = response.data.nickname;\n            // 사용자의 닉네임을 이용하여 해당 사용자가 작성한 게시물을 가져오는 API 호출\n            axios.get(`http://localhost:7777/boards?nickname=${userNickname}`)\n                .then(response => {\n                  // 가져온 게시물을 저장합니다.\n                  this.boards = response.data;\n                })\n                .catch(error => {\n                  console.error('Error fetching user boards:', error);\n                });\n          })\n          .catch(error => {\n            console.error('Error fetching user info:', error);\n          });\n    },\n    // 페이지를 설정하는 메서드\n    setPage(page) {\n      this.currentPage = page;\n    },\n    // 이전 페이지로 이동하는 메서드\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    // 다음 페이지로 이동하는 메서드\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    // 새로운 게시물 작성 페이지로 이동하는 메서드\n    goToPostForm() {\n      this.$router.push('/post/new');\n    }\n  }\n};\n</script>\n\n<style>\n.container {\n  margin: 20px auto;\n  width: 80%;\n}\n\n.table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.table th, .table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\n.table th {\n  background-color: #f2f2f2;\n}\n\n.pagination {\n  margin-top: 20px;\n  text-align: center;\n}\n\n.pagination-btn {\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 16px;\n  border: none;\n  cursor: pointer;\n}\n\n.pagination-btn:hover {\n  background-color: #45a049;\n}\n\n.active {\n  background-color: #45a049;\n}\n\n.add-btn {\n  background-color: #008CBA;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  margin-top: 20px;\n}\n\n.add-btn:hover {\n  background-color: #00698C;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;gCACpBC,mBAAA,CAAe,YAAX,QAAM;;EACHD,KAAK,EAAC;AAAO;gCAElBC,mBAAA,CAOQ,gB,aANRA,mBAAA,CAKK,a,aAJHA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAY,YAAR,KAAG,G,aACPA,mBAAA,CAAY,YAAR,KAAG,E;;EAcND,KAAK,EAAC;AAAY;mBAxB3B;gCA6BIC,mBAAA,CAAI;;;uBA5BNC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,UAAe,EACfH,mBAAA,CAmBQ,SAnBRI,UAmBQ,GAlBNC,mBAAA,YAAe,EACfC,UAOQ,EACRD,mBAAA,YAAe,EACfL,mBAAA,CAOQ,iB,kBANRC,mBAAA,CAKKM,SAAA,QApBXC,WAAA,CAe0BC,QAAA,CAAAC,eAAe,EAAxBC,KAAK;yBAAhBV,mBAAA,CAKK;MALiCW,GAAG,EAAED,KAAK,CAACE;QAC/Cb,mBAAA,CAAuB,YAAAc,gBAAA,CAAhBH,KAAK,CAACE,EAAE,kBACfb,mBAAA,CAAgF,aAA5Ee,YAAA,CAAuEC,sBAAA;MAAzDC,EAAE,cAAcN,KAAK,CAACE;;MAjBhDK,OAAA,EAAAC,QAAA,CAiBoD,MAAiB,CAjBrEC,gBAAA,CAAAN,gBAAA,CAiBuDH,KAAK,CAACU,KAAK,iB;MAjBlEC,CAAA;mDAkBQtB,mBAAA,CAA2B,YAAAc,gBAAA,CAApBH,KAAK,CAACY,MAAM,kBACnBvB,mBAAA,CAAiC,YAAAc,gBAAA,CAA1BH,KAAK,CAACa,YAAY,iB;sCAI7BnB,mBAAA,YAAe,EACfL,mBAAA,CAIM,OAJNyB,UAIM,GAHUC,KAAA,CAAAC,WAAW,Q,cAAzB1B,mBAAA,CAAmF;IAzBzFW,GAAA;IAyBsCgB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAErB,QAAA,CAAAsB,QAAA,IAAAtB,QAAA,CAAAsB,QAAA,IAAAD,IAAA,CAAQ;IAAE/B,KAAK,EAAC;KAAiB,IAAE,KAzBhFM,mBAAA,iB,kBA0BMJ,mBAAA,CAA6JM,SAAA,QA1BnKC,WAAA,CA0B6BC,QAAA,CAAAuB,UAAU,EAAlBC,IAAI;yBAAnBhC,mBAAA,CAA6J;MAAzHW,GAAG,EAAEqB,IAAI;MAAGL,OAAK,EAAAM,MAAA,IAAEzB,QAAA,CAAA0B,OAAO,CAACF,IAAI;MAAIlC,KAAK,EA1BlFqC,eAAA;QAAA;QAAA,UA0BwHV,KAAA,CAAAC,WAAW,KAAKM;MAAI;wBAAOA,IAAI,gCA1BvJI,UAAA;kCA2BoBX,KAAA,CAAAC,WAAW,GAAGlB,QAAA,CAAAuB,UAAU,I,cAAtC/B,mBAAA,CAA4F;IA3BlGW,GAAA;IA2B+CgB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAErB,QAAA,CAAA6B,QAAA,IAAA7B,QAAA,CAAA6B,QAAA,IAAAR,IAAA,CAAQ;IAAE/B,KAAK,EAAC;KAAiB,IAAE,KA3BzFM,mBAAA,e,GA6BIkC,UAAI,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}