{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: \"FinalMap\",\n  data() {\n    return {\n      keyword: \"\",\n      places: [],\n      map: null,\n      marker: null,\n      infowindow: null,\n      currentCircle: null,\n      address: '',\n      searchResult: [],\n      markers: []\n    };\n  },\n  mounted() {\n    kakao.maps.load(() => {\n      this.initMap();\n      this.findMyLocation();\n    });\n  },\n  methods: {\n    initMap() {\n      // 지도 초기 세팅\n      this.map = new kakao.maps.Map(this.$refs.map, {\n        center: new kakao.maps.LatLng(33.450701, 126.570667),\n        level: 3\n      });\n      this.marker = new kakao.maps.Marker();\n      this.infowindow = new kakao.maps.InfoWindow({\n        removable: true\n      });\n    },\n    displayCircle(lat, lon) {\n      // 반경 표시\n      if (this.currentCircle !== null) {\n        this.currentCircle.setMap(null);\n      }\n      this.currentCircle = new kakao.maps.Circle({\n        center: new kakao.maps.LatLng(lat, lon),\n        radius: 1000,\n        strokeWeight: 5,\n        strokeColor: '#75B8FA',\n        strokeOpacity: 1,\n        strokeStyle: 'dashed',\n        fillColor: '#CFE7FF',\n        fillOpacity: 0.7\n      });\n      this.currentCircle.setMap(this.map);\n    },\n    displayMarker(locPosition, message) {\n      // 마커 표시\n      this.marker.setMap(this.map);\n      this.marker.setPosition(locPosition);\n\n      // 인포윈도우 설정\n      this.infowindow.setContent(message);\n      this.infowindow.open(this.map, this.marker);\n\n      // 지도 중심 위치 설정\n      this.map.setCenter(locPosition);\n\n      // 마커 클릭 이벤트 등록\n      kakao.maps.event.addListener(this.marker, 'click', () => {\n        // 마커 클릭 시 주소 정보 가져오기\n        const geocoder = new kakao.maps.services.Geocoder();\n        geocoder.coord2Address(locPosition.getLng(), locPosition.getLat(), (result, status) => {\n          if (status === kakao.maps.services.Status.OK) {\n            let detailAddr = result[0].road_address ? `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` : '';\n            detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div>` + `<button id=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\n\n            // 인포윈도우에 상세 주소 정보 표시\n            this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\n\n            // 즐겨찾기 버튼 클릭 이벤트 리스너\n            const addFavoriteButtons = document.querySelectorAll('.addFavorite');\n            addFavoriteButtons.forEach(button => {\n              button.addEventListener('click', () => {\n                alert(\"즐겨찾기 버튼 클릭\");\n              });\n            });\n          }\n        });\n      });\n    },\n    findMyLocation() {\n      // 현재 위치 찾기\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lat = position.coords.latitude;\n          const lon = position.coords.longitude;\n          const locPosition = new kakao.maps.LatLng(lat, lon);\n          const message = '<div class=\"infoWindow\">현재 나의 위치</div>';\n          this.displayMarker(locPosition, message);\n          this.displayCircle(lat, lon);\n        }, error => {\n          console.error(error);\n        }, {\n          enableHighAccuracy: true,\n          maximumAge: 0,\n          timeout: Infinity\n        });\n      } else {\n        alert('geolocation을 사용할 수 없습니다.');\n      }\n    },\n    searchAddress() {\n      const addr = this.address;\n      alert(\"검색한 주소 : \" + addr);\n      // kakao maps Places 객체 생성\n      const places = new kakao.maps.services.Places();\n      // 주소 검색 요청\n      places.keywordSearch(addr, (result, status) => {\n        if (status === kakao.maps.services.Status.OK) {\n          if (result.length > 1) {\n            // 검색 결과가 여러 개인 경우\n            // 검색 결과 리스트 설정\n            this.searchResult = result;\n          } else if (result.length === 1) {\n            // 검색 결과가 하나인 경우\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\n            this.displayMarker(coords, result[0].address_name);\n            this.displayCircle(result[0].y, result[0].x);\n            // 지번 주소 출력\n            const geocoder = new kakao.maps.services.Geocoder();\n            geocoder.coord2Address(result[0].x, result[0].y, (result, status) => {\n              if (status === kakao.maps.services.Status.OK) {\n                const address = result[0].address.address_name;\n                alert(\"선택한 위치의 지번 주소: \" + address);\n                // 주소를 시/도 까지만 잘라내기\n                const slicedAddr = address.split(' ').slice(0, 2).join(' ');\n                // AJAX 통신으로 잘라낸 지번 주소 데이터 전달\n                this.fetchChargerData(slicedAddr);\n              }\n            });\n          } else {\n            alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\n          }\n        } else {\n          alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\n        }\n      });\n    },\n    moveToLocation(lat, lon) {\n      // 위치 이동\n      const locPosition = new kakao.maps.LatLng(lat, lon);\n      const message = '<div class=\"infoWindow\">검색 결과 위치</div>';\n      this.displayMarker(locPosition, message);\n      this.displayCircle(lat, lon);\n\n      // 좌표를 주소로 변환하여 API 호출\n      const geocoder = new kakao.maps.services.Geocoder();\n      geocoder.coord2Address(lon, lat, (result, status) => {\n        if (status === kakao.maps.services.Status.OK) {\n          const address = result[0].address.address_name;\n          const slicedAddr = address.split(' ').slice(0, 1).join(' ');\n          this.fetchChargerData(slicedAddr);\n        }\n      });\n    },\n    fetchChargerData(address) {\n      // 주소를 이용하여 충전소 데이터 가져오기\n      axios.get(`http://localhost:7777/bbabap/getchargeraddress/${address}`).then(response => {\n        const data = response.data;\n        console.log('Charger Info:', data);\n        // 가져온 데이터로 마커 표시\n        this.displayMarkersWithAddresses(data.data);\n      }).catch(error => {\n        console.error('Error fetching charger data:', error);\n      });\n    },\n    displayMarkersWithAddresses(dataArray) {\n      // 배열에 있는 각 데이터에 대해 반복하며 마커를 표시\n      dataArray.forEach(charger => {\n        // 주소를 이용하여 지도에 마커를 생성하고 표시\n        const geocoder = new kakao.maps.services.Geocoder();\n        geocoder.addressSearch(charger.주소, (result, status) => {\n          if (status === kakao.maps.services.Status.OK) {\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\n            // 마커 생성\n            const marker = new kakao.maps.Marker({\n              position: coords\n            });\n            // 마커를 지도에 표시\n            marker.setMap(this.map);\n            // 마커 클릭 시 정보창에 주소 정보와 즐겨찾기 버튼을 함께 출력\n            kakao.maps.event.addListener(marker, 'click', () => {\n              // 마커의 좌표 정보를 사용하여 주소 정보를 요청.\n              geocoder.coord2Address(marker.getPosition().getLng(), marker.getPosition().getLat(), (result, status) => {\n                if (status === kakao.maps.services.Status.OK) {\n                  let detailAddr = result[0].road_address ? `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` : '';\n                  detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div><button class=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\n                  // 인포윈도우에 상세 주소 정보를 표시합니다\n                  this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${charger.충전소명}</div><div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\n                  this.infowindow.open(this.map, marker);\n                  // 즐겨찾기 버튼 클릭 이벤트 리스너\n                  const addFavoriteButtons = document.querySelectorAll('.addFavorite');\n                  addFavoriteButtons.forEach(button => {\n                    button.addEventListener('click', () => {\n                      alert(\"즐겨찾기 버튼 클릭\");\n                    });\n                  });\n                }\n              });\n            });\n            // 마커를 클릭했을 때 정보창을 열기 위한 내용 설정\n            const message = `<div class=\"infoWindow\">${charger.충전소명}</div>`;\n            this.infowindow.setContent(message);\n            this.infowindow.open(this.map, marker); //지도에 정보창 표시\n          }\n        });\n      });\n    },\n    findMyLocbtn() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lat = position.coords.latitude;\n          const lon = position.coords.longitude;\n          const locPosition = new kakao.maps.LatLng(lat, lon);\n          const message = '<div class=\"infoWindow\">현재 위치</div>';\n          this.displayMarker(locPosition, message);\n          this.displayCircle(lat, lon);\n        }, error => {\n          console.error(error);\n        }, {\n          enableHighAccuracy: true,\n          maximumAge: 0,\n          timeout: Infinity\n        });\n      } else {\n        alert('geolocation을 사용할 수 없어요..');\n      }\n    },\n    removeMarkersbtn() {\n      // 이전에 생성된 모든 마커를 지도에서 제거합니다.\n      this.markers.forEach(marker => {\n        // 클릭 이벤트 리스너를 함께 제거합니다.\n        kakao.maps.event.removeListener(marker, 'click');\n        marker.setMap(null);\n      });\n      // 배열을 비워줍니다.\n      this.markers = [];\n    },\n    handleKeyDown(event) {\n      if (event.key === \"Enter\") {\n        this.searchAddress();\n      }\n    },\n    displayElectricChargingStation() {\n      const ps = new window.kakao.maps.services.Places();\n      ps.categorySearch('OL7', this.placesSearchCB);\n    },\n    searchPlaces() {\n      if (!this.keyword.trim()) {\n        alert(\"키워드를 입력해주세요!\");\n        return;\n      }\n\n      // 검색을 place_name으로 변경\n      const ps = new window.kakao.maps.services.Places();\n      // ps.keywordSearch(this.keyword, this.placesSearchCB);\n      ps.keywordSearch(this.keyword, this.placesSearchCB, {\n        useMapBounds: true\n      });\n    },\n    placesSearchCB(data, status, pagination) {\n      if (status === window.kakao.maps.services.Status.OK) {\n        this.places = data;\n        this.displayPlaces();\n        this.displayPagination(pagination);\n      } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\n        alert(\"검색 결과가 존재하지 않습니다.\");\n      } else if (status === window.kakao.maps.services.Status.ERROR) {\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\n      }\n    },\n    displayPlaces() {\n      // 기존 마커 제거\n      this.removeMarkers();\n      const bounds = new window.kakao.maps.LatLngBounds();\n\n      // 검색 결과에 따라 마커 추가\n      this.places.forEach((place, index) => {\n        const position = new window.kakao.maps.LatLng(place.y, place.x);\n        const markerImage = new window.kakao.maps.MarkerImage(\"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\", new window.kakao.maps.Size(36, 37), {\n          spriteSize: new window.kakao.maps.Size(36, 691),\n          spriteOrigin: new window.kakao.maps.Point(0, index * 46 + 10),\n          offset: new window.kakao.maps.Point(13, 37)\n        });\n        const marker = new window.kakao.maps.Marker({\n          position,\n          image: markerImage\n        });\n        marker.setMap(this.map);\n        this.markers.push(marker);\n        bounds.extend(position);\n      });\n      this.map.setBounds(bounds);\n    },\n    displayPagination(pagination) {\n      const paginationEl = document.getElementById(\"pagination\");\n      paginationEl.innerHTML = \"\";\n      for (let i = 1; i <= pagination.last; i++) {\n        const el = document.createElement(\"a\");\n        el.href = \"#\";\n        el.textContent = i;\n        if (i === pagination.current) {\n          el.className = \"on\";\n        } else {\n          el.onclick = () => {\n            pagination.gotoPage(i);\n          };\n        }\n        paginationEl.appendChild(el);\n      }\n    },\n    removeMarkers() {\n      this.markers.forEach(marker => marker.setMap(null));\n      this.markers = [];\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","keyword","places","map","marker","infowindow","currentCircle","address","searchResult","markers","mounted","kakao","maps","load","initMap","findMyLocation","methods","Map","$refs","center","LatLng","level","Marker","InfoWindow","removable","displayCircle","lat","lon","setMap","Circle","radius","strokeWeight","strokeColor","strokeOpacity","strokeStyle","fillColor","fillOpacity","displayMarker","locPosition","message","setPosition","setContent","open","setCenter","event","addListener","geocoder","services","Geocoder","coord2Address","getLng","getLat","result","status","Status","OK","detailAddr","road_address","address_name","addFavoriteButtons","document","querySelectorAll","forEach","button","addEventListener","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","searchAddress","addr","Places","keywordSearch","length","y","x","slicedAddr","split","slice","join","fetchChargerData","moveToLocation","get","then","response","log","displayMarkersWithAddresses","catch","dataArray","charger","addressSearch","주소","getPosition","충전소명","findMyLocbtn","removeMarkersbtn","removeListener","handleKeyDown","key","displayElectricChargingStation","ps","window","categorySearch","placesSearchCB","searchPlaces","trim","useMapBounds","pagination","displayPlaces","displayPagination","ZERO_RESULT","ERROR","removeMarkers","bounds","LatLngBounds","place","index","markerImage","MarkerImage","Size","spriteSize","spriteOrigin","Point","offset","image","push","extend","setBounds","paginationEl","getElementById","innerHTML","i","last","el","createElement","href","textContent","current","className","onclick","gotoPage","appendChild"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\FinalMap.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <table>\r\n      <div>\r\n        <form>\r\n          주소검색 : <input type=\"text\" v-model=\"address\" size=\"15\" @keydown.enter=\"searchAddress\"/>\r\n          <button type=\"submit\" @click=\"searchAddress\">검색</button>\r\n        </form>\r\n      </div>\r\n    </table>\r\n    <div class=\"option\">\r\n      <div>\r\n        <form @submit.prevent=\"searchPlaces\">\r\n          키워드 : <input type=\"text\" v-model=\"keyword\" size=\"15\" placeholder=\"전기차\">\r\n          <button type=\"submit\">검색하기</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <button type=\"submit\" @click=\"findMyLocation\">내 위치로</button>\r\n    <div class=\"map_wrap\">\r\n      <div id=\"map\" style=\"width: 100%; height: 700px; position: relative; overflow: hidden;\"></div>\r\n      <!-- 검색 결과를 표시할 팝업 리스트 -->\r\n      <div id=\"searchResults\">\r\n        <ul v-if=\"searchResult.length > 0\">\r\n          <li v-for=\"result in searchResult\" :key=\"result.place_name\">\r\n            <a href=\"#\" @click=\"moveToLocation(result.y, result.x)\">{{ result.place_name }}</a>\r\n          </li>\r\n        </ul>\r\n        <p v-else>검색 결과가 없습니다. 주소를 다시 확인해주세요.</p>\r\n      </div>\r\n      <div id=\"menu_wrap\" class=\"bg_white\">\r\n        <hr>\r\n        <ul id=\"placesList\">\r\n          <li v-for=\"(place, index) in places\" :key=\"index\" class=\"item\">\r\n            <span :class=\"'markerbg marker_' + (index + 1)\"></span>\r\n            <div class=\"info\">\r\n              <h5>{{ place.place_name }}</h5>\r\n              <span>{{ place.road_address_name }}</span>\r\n              <span class=\"jibun gray\">{{ place.address_name }}</span>\r\n              <span class=\"tel\">{{ place.phone }}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        <div id=\"pagination\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"FinalMap\",\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      places: [],\r\n      map: null,\r\n      marker: null,\r\n      infowindow: null,\r\n      currentCircle: null,\r\n      address: '',\r\n      searchResult: [],\r\n      markers: []\r\n    };\r\n  },\r\n  mounted() {\r\n    kakao.maps.load(() => {\r\n      this.initMap();\r\n      this.findMyLocation();\r\n    });\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 지도 초기 세팅\r\n      this.map = new kakao.maps.Map(this.$refs.map, {\r\n        center: new kakao.maps.LatLng(33.450701, 126.570667),\r\n        level: 3\r\n      });\r\n      this.marker = new kakao.maps.Marker();\r\n      this.infowindow = new kakao.maps.InfoWindow({ removable: true });\r\n    },\r\n    displayCircle(lat, lon) {\r\n      // 반경 표시\r\n      if (this.currentCircle !== null) {\r\n        this.currentCircle.setMap(null);\r\n      }\r\n      this.currentCircle = new kakao.maps.Circle({\r\n        center: new kakao.maps.LatLng(lat, lon),\r\n        radius: 1000,\r\n        strokeWeight: 5,\r\n        strokeColor: '#75B8FA',\r\n        strokeOpacity: 1,\r\n        strokeStyle: 'dashed',\r\n        fillColor: '#CFE7FF',\r\n        fillOpacity: 0.7\r\n      });\r\n      this.currentCircle.setMap(this.map);\r\n    },\r\n    displayMarker(locPosition, message) {\r\n      // 마커 표시\r\n      this.marker.setMap(this.map);\r\n      this.marker.setPosition(locPosition);\r\n\r\n      // 인포윈도우 설정\r\n      this.infowindow.setContent(message);\r\n      this.infowindow.open(this.map, this.marker);\r\n\r\n      // 지도 중심 위치 설정\r\n      this.map.setCenter(locPosition);\r\n\r\n      // 마커 클릭 이벤트 등록\r\n      kakao.maps.event.addListener(this.marker, 'click', () => {\r\n        // 마커 클릭 시 주소 정보 가져오기\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        geocoder.coord2Address(locPosition.getLng(), locPosition.getLat(), (result, status) => {\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            let detailAddr = result[0].road_address ?\r\n                `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` :\r\n                '';\r\n            detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div>` +\r\n                `<button id=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\r\n\r\n            // 인포윈도우에 상세 주소 정보 표시\r\n            this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\r\n\r\n            // 즐겨찾기 버튼 클릭 이벤트 리스너\r\n            const addFavoriteButtons = document.querySelectorAll('.addFavorite');\r\n            addFavoriteButtons.forEach(button => {\r\n              button.addEventListener('click', () => {\r\n                alert(\"즐겨찾기 버튼 클릭\");\r\n              });\r\n            });\r\n          }\r\n        });\r\n      });\r\n    },\r\n    findMyLocation() {\r\n      // 현재 위치 찾기\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n              const lat = position.coords.latitude;\r\n              const lon = position.coords.longitude;\r\n              const locPosition = new kakao.maps.LatLng(lat, lon);\r\n              const message = '<div class=\"infoWindow\">현재 나의 위치</div>';\r\n              this.displayMarker(locPosition, message);\r\n              this.displayCircle(lat, lon);\r\n            },\r\n            error => {\r\n              console.error(error);\r\n            },\r\n            {\r\n              enableHighAccuracy: true,\r\n              maximumAge: 0,\r\n              timeout: Infinity\r\n            }\r\n        );\r\n      } else {\r\n        alert('geolocation을 사용할 수 없습니다.');\r\n      }\r\n    },\r\n    searchAddress() {\r\n      const addr = this.address;\r\n      alert(\"검색한 주소 : \"+ addr);\r\n      // kakao maps Places 객체 생성\r\n      const places = new kakao.maps.services.Places();\r\n      // 주소 검색 요청\r\n      places.keywordSearch(addr, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          if (result.length > 1) { // 검색 결과가 여러 개인 경우\r\n            // 검색 결과 리스트 설정\r\n            this.searchResult = result;\r\n          } else if (result.length === 1) { // 검색 결과가 하나인 경우\r\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            this.displayMarker(coords, result[0].address_name);\r\n            this.displayCircle(result[0].y, result[0].x);\r\n            // 지번 주소 출력\r\n            const geocoder = new kakao.maps.services.Geocoder();\r\n            geocoder.coord2Address(result[0].x, result[0].y, (result, status) => {\r\n              if (status === kakao.maps.services.Status.OK) {\r\n                const address = result[0].address.address_name;\r\n                alert(\"선택한 위치의 지번 주소: \" + address);\r\n                // 주소를 시/도 까지만 잘라내기\r\n                const slicedAddr = address.split(' ').slice(0, 2).join(' ');\r\n                // AJAX 통신으로 잘라낸 지번 주소 데이터 전달\r\n                this.fetchChargerData(slicedAddr);\r\n              }\r\n            });\r\n          } else {\r\n            alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\r\n          }\r\n        } else {\r\n          alert(\"검색 결과가 없습니다. 주소를 다시 확인해주세요.\");\r\n        }\r\n      });\r\n    },\r\n    moveToLocation(lat, lon) {\r\n      // 위치 이동\r\n      const locPosition = new kakao.maps.LatLng(lat, lon);\r\n      const message = '<div class=\"infoWindow\">검색 결과 위치</div>';\r\n      this.displayMarker(locPosition, message);\r\n      this.displayCircle(lat, lon);\r\n\r\n      // 좌표를 주소로 변환하여 API 호출\r\n      const geocoder = new kakao.maps.services.Geocoder();\r\n      geocoder.coord2Address(lon, lat, (result, status) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n          const address = result[0].address.address_name;\r\n          const slicedAddr = address.split(' ').slice(0, 1).join(' ');\r\n          this.fetchChargerData(slicedAddr);\r\n        }\r\n      });\r\n    },\r\n    fetchChargerData(address) {\r\n      // 주소를 이용하여 충전소 데이터 가져오기\r\n      axios.get(`http://localhost:7777/bbabap/getchargeraddress/${address}`)\r\n          .then(response => {\r\n            const data = response.data;\r\n            console.log('Charger Info:', data);\r\n            // 가져온 데이터로 마커 표시\r\n            this.displayMarkersWithAddresses(data.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching charger data:', error);\r\n          });\r\n    },\r\n    displayMarkersWithAddresses(dataArray) {\r\n      // 배열에 있는 각 데이터에 대해 반복하며 마커를 표시\r\n      dataArray.forEach(charger => {\r\n        // 주소를 이용하여 지도에 마커를 생성하고 표시\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        geocoder.addressSearch(charger.주소, (result, status) => {\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n            // 마커 생성\r\n            const marker = new kakao.maps.Marker({\r\n              position: coords\r\n            });\r\n            // 마커를 지도에 표시\r\n            marker.setMap(this.map);\r\n            // 마커 클릭 시 정보창에 주소 정보와 즐겨찾기 버튼을 함께 출력\r\n            kakao.maps.event.addListener(marker, 'click', () => {\r\n              // 마커의 좌표 정보를 사용하여 주소 정보를 요청.\r\n              geocoder.coord2Address(marker.getPosition().getLng(), marker.getPosition().getLat(), (result, status) => {\r\n                if (status === kakao.maps.services.Status.OK) {\r\n                  let detailAddr = result[0].road_address ?\r\n                      `<div style=\"padding: 5px; border-bottom: 1px solid #eee; margin-bottom: 5px;\">도로명주소 : ${result[0].road_address.address_name}</div>` :\r\n                      '';\r\n                  detailAddr += `<div style=\"padding: 5px;\">지번 주소 : ${result[0].address.address_name}</div><button class=\"addFavorite\" style=\"margin-top: 5px;\">즐겨찾기 추가</button>`;\r\n                  // 인포윈도우에 상세 주소 정보를 표시합니다\r\n                  this.infowindow.setContent(`<div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${charger.충전소명}</div><div style=\"margin:10px; font-size:12px; min-width:200px; line-height:1.5;\">${detailAddr}</div>`);\r\n                  this.infowindow.open(this.map, marker);\r\n                  // 즐겨찾기 버튼 클릭 이벤트 리스너\r\n                  const addFavoriteButtons = document.querySelectorAll('.addFavorite');\r\n                  addFavoriteButtons.forEach(button => {\r\n                    button.addEventListener('click', () => {\r\n                      alert(\"즐겨찾기 버튼 클릭\");\r\n                    });\r\n                  });\r\n                }\r\n              });\r\n            });\r\n            // 마커를 클릭했을 때 정보창을 열기 위한 내용 설정\r\n            const message = `<div class=\"infoWindow\">${charger.충전소명}</div>`;\r\n            this.infowindow.setContent(message);\r\n            this.infowindow.open(this.map, marker);//지도에 정보창 표시\r\n          }\r\n        });\r\n      });\r\n    },\r\n    findMyLocbtn() {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n              const lat = position.coords.latitude;\r\n              const lon = position.coords.longitude;\r\n              const locPosition = new kakao.maps.LatLng(lat, lon);\r\n              const message = '<div class=\"infoWindow\">현재 위치</div>';\r\n              this.displayMarker(locPosition, message);\r\n              this.displayCircle(lat, lon);\r\n            },\r\n            error => {\r\n              console.error(error);\r\n            },\r\n            {\r\n              enableHighAccuracy: true,\r\n              maximumAge: 0,\r\n              timeout: Infinity\r\n            }\r\n        );\r\n      } else {\r\n        alert('geolocation을 사용할 수 없어요..');\r\n      }\r\n    },\r\n    removeMarkersbtn() {\r\n      // 이전에 생성된 모든 마커를 지도에서 제거합니다.\r\n      this.markers.forEach(marker => {\r\n        // 클릭 이벤트 리스너를 함께 제거합니다.\r\n        kakao.maps.event.removeListener(marker, 'click');\r\n        marker.setMap(null);\r\n      });\r\n      // 배열을 비워줍니다.\r\n      this.markers = [];\r\n    },\r\n    handleKeyDown(event) {\r\n      if (event.key === \"Enter\") {\r\n        this.searchAddress();\r\n      }\r\n    },\r\n    displayElectricChargingStation() {\r\n      const ps = new window.kakao.maps.services.Places();\r\n      ps.categorySearch('OL7', this.placesSearchCB);\r\n    },\r\n    searchPlaces() {\r\n      if (!this.keyword.trim()) {\r\n        alert(\"키워드를 입력해주세요!\");\r\n        return;\r\n      }\r\n\r\n      // 검색을 place_name으로 변경\r\n      const ps = new window.kakao.maps.services.Places();\r\n      // ps.keywordSearch(this.keyword, this.placesSearchCB);\r\n      ps.keywordSearch(this.keyword, this.placesSearchCB, { useMapBounds: true });\r\n    },\r\n    placesSearchCB(data, status, pagination) {\r\n      if (status === window.kakao.maps.services.Status.OK) {\r\n        this.places = data;\r\n        this.displayPlaces();\r\n        this.displayPagination(pagination);\r\n      } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\r\n        alert(\"검색 결과가 존재하지 않습니다.\");\r\n      } else if (status === window.kakao.maps.services.Status.ERROR) {\r\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\r\n      }\r\n    },\r\n    displayPlaces() {\r\n      // 기존 마커 제거\r\n      this.removeMarkers();\r\n\r\n      const bounds = new window.kakao.maps.LatLngBounds();\r\n\r\n      // 검색 결과에 따라 마커 추가\r\n      this.places.forEach((place, index) => {\r\n        const position = new window.kakao.maps.LatLng(place.y, place.x);\r\n        const markerImage = new window.kakao.maps.MarkerImage(\r\n            \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\",\r\n            new window.kakao.maps.Size(36, 37),\r\n            {\r\n              spriteSize: new window.kakao.maps.Size(36, 691),\r\n              spriteOrigin: new window.kakao.maps.Point(0, (index * 46) + 10),\r\n              offset: new window.kakao.maps.Point(13, 37)\r\n            }\r\n        );\r\n        const marker = new window.kakao.maps.Marker({\r\n          position,\r\n          image: markerImage\r\n        });\r\n\r\n        marker.setMap(this.map);\r\n        this.markers.push(marker);\r\n\r\n        bounds.extend(position);\r\n      });\r\n\r\n      this.map.setBounds(bounds);\r\n    },\r\n    displayPagination(pagination) {\r\n      const paginationEl = document.getElementById(\"pagination\");\r\n      paginationEl.innerHTML = \"\";\r\n\r\n      for (let i = 1; i <= pagination.last; i++) {\r\n        const el = document.createElement(\"a\");\r\n        el.href = \"#\";\r\n        el.textContent = i;\r\n\r\n        if (i === pagination.current) {\r\n          el.className = \"on\";\r\n        } else {\r\n          el.onclick = () => {\r\n            pagination.gotoPage(i);\r\n          };\r\n        }\r\n\r\n        paginationEl.appendChild(el);\r\n      }\r\n    },\r\n    removeMarkers() {\r\n      this.markers.forEach(marker => marker.setMap(null));\r\n      this.markers = [];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 여기에 스타일을 추가합니다 */\r\n#menu_wrap {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n.option {\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n}\r\n.option input[type=\"text\"] {\r\n  width: 70%;\r\n  height: 30px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n}\r\n.option button[type=\"submit\"] {\r\n  width: 25%;\r\n  height: 36px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  cursor: pointer;\r\n}\r\n.option button[type=\"submit\"]:hover {\r\n  background-color: #0056b3;\r\n}\r\n#placesList {\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n#placesList .item {\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px 0;\r\n}\r\n#placesList .item:last-child {\r\n  border-bottom: none;\r\n}\r\n#placesList .item h5 {\r\n  margin-bottom: 5px;\r\n}\r\n#placesList .item .info {\r\n  color: #666;\r\n}\r\n#placesList .item .tel {\r\n  color: #009900;\r\n}\r\n.infoWindow {\r\n  padding: 5px;\r\n  border: 1px solid #CCCCCC;\r\n  border-radius: 5px;\r\n  width: auto;\r\n  min-width: 150px;\r\n  max-width: 400px;\r\n  word-wrap: break-word;\r\n  overflow: hidden;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}