{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      username: '',\n      nickname: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      emailErrorMessage: '',\n      passwordMismatch: false,\n      passwordLengthMet: false,\n      passwordUpperCaseMet: false,\n      passwordSpecialCharacterMet: false,\n      passwordConditionsMet: 0,\n      users: [] // 사용자 데이터를 저장할 배열\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:3000/users');\n      this.users = response.data;\n    } catch (error) {\n      console.error('사용자 데이터를 가져오는 중 에러 발생:', error);\n    }\n  },\n  computed: {\n    canSubmit() {\n      return this.username && this.nickname && this.email && this.password && this.passwordConfirm && !this.emailErrorMessage && !this.passwordMismatch && this.passwordConditionsMet === 3;\n    }\n  },\n  methods: {\n    async signup() {\n      // 유효성 검사\n      if (!this.canSubmit) {\n        alert('모든 필드를 올바르게 입력하세요.');\n        return;\n      }\n\n      // 아이디와 닉네임 중복 검사\n      const usernameExists = this.checkUsernameExists(this.username);\n      const nicknameExists = this.checkNicknameExists(this.nickname);\n      if (usernameExists || nicknameExists) {\n        alert('아이디 또는 닉네임이 이미 사용 중입니다.');\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:3000/users', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.username,\n            nickname: this.nickname,\n            email: this.email,\n            password: this.password\n          })\n        });\n        if (response.ok) {\n          // 회원가입 성공\n          console.log('회원가입 성공');\n\n          // Vue Router를 사용하여 로그인 페이지로 이동\n          this.$router.push({\n            path: '/login'\n          });\n        } else {\n          // 회원가입 실패\n          console.error('회원가입 실패');\n        }\n      } catch (error) {\n        console.error('회원가입 오류:', error);\n      }\n    },\n    checkUsernameExists(username) {\n      return this.users.some(user => user.username === username);\n    },\n    checkNicknameExists(nickname) {\n      return this.users.some(user => user.nickname === nickname);\n    },\n    validateEmail() {\n      // 간단한 이메일 유효성 검사 정규식\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.email)) {\n        this.emailErrorMessage = '올바른 이메일을 입력하세요.';\n      } else {\n        this.emailErrorMessage = '';\n      }\n    },\n    validatePassword() {\n      // 비밀번호 길이가 4자 이상인지 확인\n      this.passwordLengthMet = this.password.length >= 4;\n\n      // 대문자 포함 여부 확인\n      this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\n\n      // 특수문자 포함 여부 확인\n      this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\n\n      // 만족하는 비밀번호 조건 개수 계산\n      this.passwordConditionsMet = [this.passwordLengthMet, this.passwordUpperCaseMet, this.passwordSpecialCharacterMet].filter(condition => condition).length;\n    },\n    validatePasswordConfirm() {\n      // 비밀번호 확인 일치 여부 확인\n      this.passwordMismatch = this.password !== this.passwordConfirm;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","username","nickname","email","password","passwordConfirm","emailErrorMessage","passwordMismatch","passwordLengthMet","passwordUpperCaseMet","passwordSpecialCharacterMet","passwordConditionsMet","users","created","response","get","error","console","computed","canSubmit","methods","signup","alert","usernameExists","checkUsernameExists","nicknameExists","checkNicknameExists","fetch","method","headers","body","JSON","stringify","ok","log","$router","push","path","some","user","validateEmail","emailRegex","test","validatePassword","length","filter","condition","validatePasswordConfirm"],"sources":["C:\\encore\\be05-3rd-1team-BBABAP-Frontend\\src\\components\\SignupForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"signup-form\">\r\n    <h2>회원가입</h2>\r\n    <form @submit.prevent=\"signup\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">ID</label>\r\n        <input type=\"text\" id=\"username\" v-model=\"username\" required>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"nickname\">닉네임</label>\r\n        <input type=\"text\" id=\"nickname\" v-model=\"nickname\" required>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">E-MAIL</label>\r\n        <input type=\"email\" id=\"email\" v-model=\"email\" required @blur=\"validateEmail\">\r\n        <p v-if=\"emailErrorMessage\" class=\"error-message\">{{ emailErrorMessage }}</p>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">PASSWORD</label>\r\n        <input type=\"password\" id=\"password\" v-model=\"password\" required @input=\"validatePassword\">\r\n        <div class=\"password-strength-bar\">\r\n          <div :style=\"{ width: passwordLengthMet ? '33.33%' : '0%', backgroundColor: passwordLengthMet ? '#6f9e5e' : '' }\" class=\"strength-meter-1\"></div>\r\n          <div :style=\"{ width: passwordUpperCaseMet ? '33.33%' : '0%', backgroundColor: passwordUpperCaseMet ? '#6f9e5e' : '' }\" class=\"strength-meter-2\"></div>\r\n          <div :style=\"{ width: passwordSpecialCharacterMet ? '33.33%' : '0%', backgroundColor: passwordSpecialCharacterMet ? '#6f9e5e' : '' }\" class=\"strength-meter-3\"></div>\r\n        </div>\r\n        <div class=\"password-conditions\">\r\n          <span :class=\"{ 'condition-met': passwordLengthMet }\">최소 4자 이상</span>\r\n          <span :class=\"{ 'condition-met': passwordUpperCaseMet }\">대문자 포함</span>\r\n          <span :class=\"{ 'condition-met': passwordSpecialCharacterMet }\">특수문자 포함</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"passwordConfirm\">비밀번호 확인</label>\r\n        <input type=\"password\" id=\"passwordConfirm\" v-model=\"passwordConfirm\" required @input=\"validatePasswordConfirm\">\r\n        <p v-if=\"passwordMismatch\" class=\"error-message\">비밀번호가 일치하지 않습니다.</p>\r\n      </div>\r\n      <button :disabled=\"!canSubmit\" type=\"submit\">회원가입</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      nickname: '',\r\n      email: '',\r\n      password: '',\r\n      passwordConfirm: '',\r\n      emailErrorMessage: '',\r\n      passwordMismatch: false,\r\n      passwordLengthMet: false,\r\n      passwordUpperCaseMet: false,\r\n      passwordSpecialCharacterMet: false,\r\n      passwordConditionsMet: 0,\r\n      users: [] // 사용자 데이터를 저장할 배열\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      const response = await axios.get('http://localhost:3000/users');\r\n      this.users = response.data;\r\n    } catch (error) {\r\n      console.error('사용자 데이터를 가져오는 중 에러 발생:', error);\r\n    }\r\n  },\r\n  computed: {\r\n    canSubmit() {\r\n      return (\r\n        this.username &&\r\n        this.nickname &&\r\n        this.email &&\r\n        this.password &&\r\n        this.passwordConfirm &&\r\n        !this.emailErrorMessage &&\r\n        !this.passwordMismatch &&\r\n        this.passwordConditionsMet === 3\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    async signup() {\r\n  // 유효성 검사\r\n  if (!this.canSubmit) {\r\n    alert('모든 필드를 올바르게 입력하세요.');\r\n    return;\r\n  }\r\n\r\n  // 아이디와 닉네임 중복 검사\r\n  const usernameExists = this.checkUsernameExists(this.username);\r\n  const nicknameExists = this.checkNicknameExists(this.nickname);\r\n\r\n  if (usernameExists || nicknameExists) {\r\n    alert('아이디 또는 닉네임이 이미 사용 중입니다.');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:3000/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        username: this.username,\r\n        nickname: this.nickname,\r\n        email: this.email,\r\n        password: this.password\r\n      })\r\n    });\r\n\r\n    if (response.ok) {\r\n  // 회원가입 성공\r\n  console.log('회원가입 성공');\r\n  \r\n  // Vue Router를 사용하여 로그인 페이지로 이동\r\n  this.$router.push({ path: '/login' });\r\n} else {\r\n  // 회원가입 실패\r\n  console.error('회원가입 실패');\r\n}\r\n\r\n  } catch (error) {\r\n    console.error('회원가입 오류:', error);\r\n  }\r\n},\r\n\r\n    checkUsernameExists(username) {\r\n      return this.users.some(user => user.username === username);\r\n    },\r\n    checkNicknameExists(nickname) {\r\n      return this.users.some(user => user.nickname === nickname);\r\n    },\r\n    validateEmail() {\r\n      // 간단한 이메일 유효성 검사 정규식\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n      if (!emailRegex.test(this.email)) {\r\n        this.emailErrorMessage = '올바른 이메일을 입력하세요.';\r\n      } else {\r\n        this.emailErrorMessage = '';\r\n      }\r\n    },\r\n    validatePassword() {\r\n      // 비밀번호 길이가 4자 이상인지 확인\r\n      this.passwordLengthMet = this.password.length >= 4;\r\n\r\n      // 대문자 포함 여부 확인\r\n      this.passwordUpperCaseMet = /[A-Z]/.test(this.password);\r\n\r\n      // 특수문자 포함 여부 확인\r\n      this.passwordSpecialCharacterMet = /[ `!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(this.password);\r\n\r\n      // 만족하는 비밀번호 조건 개수 계산\r\n      this.passwordConditionsMet = [\r\n        this.passwordLengthMet,\r\n        this.passwordUpperCaseMet,\r\n        this.passwordSpecialCharacterMet\r\n      ].filter(condition => condition).length;\r\n    },\r\n    validatePasswordConfirm() {\r\n      // 비밀번호 확인 일치 여부 확인\r\n      this.passwordMismatch = this.password !== this.passwordConfirm;\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n/* 스타일은 그대로 유지됩니다. */\r\n.password-strength-bar {\r\n  display: flex;\r\n  height: 5px;\r\n  background-color: #ccc;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.strength-meter-1,\r\n.strength-meter-2,\r\n.strength-meter-3 {\r\n  height: 100%;\r\n  transition: width 0.3s;\r\n}\r\n\r\n.strength-meter-1 {\r\n  background-color: #6f9e5e;\r\n}\r\n\r\n.strength-meter-2 {\r\n  background-color: #6f9e5e;\r\n}\r\n\r\n.strength-meter-3 {\r\n  background-color: #6f9e5e;\r\n}\r\n\r\n.password-conditions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.condition-met {\r\n  color: green;\r\n}\r\n\r\n.signup-form {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.signup-form h2 {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.signup-form form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.signup-form .form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px; /* 변경된 부분: 이전에는 15px 였습니다 */\r\n}\r\n\r\n.signup-form label {\r\n  margin-bottom: 5px; /* 변경된 부분: 간격이 너무 컸습니다 */\r\n}\r\n\r\n.signup-form input {\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  margin-bottom: 10px; /* 변경된 부분: 라벨과의 간격을 조정했습니다 */\r\n}\r\n\r\n.signup-form button {\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n}\r\n\r\n.signup-form button:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}