{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"summernoteRefElement\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["C:\\encore\\vsc_java_workspace\\be05-3rd-1team-BBABAP-Frontend\\node_modules\\vue3-summernote-editor\\src\\SummernoteEditor.vue"],"sourcesContent":["<template>\n  <div ref=\"summernoteRefElement\"></div>\n</template>\n\n<script>\nimport $ from \"jquery\";\n// You must import summernote js and css for yourself\n\n// https://summernote.org/deep-dive/#callbacks\nimport events from \"./events\";\n\nif (!window.SUMMERNOTE_DEFAULT_CONFIGS) {\n  window.SUMMERNOTE_DEFAULT_CONFIGS = {};\n}\n\nexport default {\n  props: {\n    modelValue: {\n      default: null,\n      required: true,\n      event: \"change\",\n      validator(value) {\n        return (\n          value === null || typeof value === \"string\" || value instanceof String\n        );\n      },\n    },\n    // https://summernote.org/deep-dive/\n    config: {\n      type: Object,\n      default: () => window.SUMMERNOTE_DEFAULT_CONFIGS,\n    },\n  },\n  data() {\n    return {\n      // jQuery DOM\n      elem: null,\n    };\n  },\n  mounted() {\n    this.elem = $(this.$refs.summernoteRefElement);\n    this.elem.summernote(this.config);\n    $(this.elem).on(\"summernote.change\", this.onChange);\n    if (this.modelValue) {\n      $(this.elem).summernote(\"code\", this.modelValue);\n    }\n    this.registerEvents();\n  },\n  watch: {\n    modelValue(newValue) {\n      const currValue = $(this.elem).summernote(\"code\");\n      if (newValue != currValue) {\n        $(this.elem).summernote(\"code\", newValue);\n      }\n    },\n  },\n  methods: {\n    onChange(event) {\n      const value = $(this.elem).summernote(\"code\");\n      this.$emit(\"update:modelValue\", value);\n    },\n    registerEvents() {\n      for (var realName in events) {\n        this.elem.on(`${realName}`, (...args) => {\n          this.$emit(`${events[realName]}`, ...args);\n        });\n      }\n    },\n  },\n  /**\n   * Free up memory\n   */\n  beforeUnmount() {\n    if (this.elem) {\n      this.elem.summernote(\"destroy\");\n      this.elem = null;\n    }\n  },\n};\n</script>"],"mappings":";;EACOA,GAAG,EAAC;AAAsB;;uBAA/BC,mBAAA,CAAsC,OAAtCC,UAAsC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}